@page "/orders/buy-tickets/{id}"

<PageTitle>Iv's - Buy Your Tickets</PageTitle>

@{
    CultureInfo nigeriaCulture = new CultureInfo("en-NG");
    Thread.CurrentThread.CurrentCulture = nigeriaCulture;
    Thread.CurrentThread.CurrentUICulture = nigeriaCulture;
}


<MudContainer Fixed="false" MaxWidth="MaxWidth.Large" Style="background-color:white">
   
    <MudGrid Spacing="10">
        
        <MudItem  xs="12" sm="12" md="6" lg="7" xl="7" xxl="7">

            <br /><br/>

            <div id="discovery-title">
                <span id="discovery-title-mid">Buy your tickets</span>
            </div>

            <br /><br/>
            
            @if (_processing)
            {
                <MudSkeleton Height="42px;" />
                <MudSkeleton Height="42px;" />
                <MudSkeleton Height="42px;" />
            }
            else
            {
                if (_ticketList.Any())
                {
                    <div>
                        @foreach (var com in _ticketList)
                        {
                            var title = $"{Convert.ToDateTime(com.StartDateAndTime).ToString("dddd, dd MMMM yyyy, HH:mm tt")}";
                            
                            <div style="font-size: 15px; color: rgb(79 79 80); background-color: #fdf6fdfc; font-weight: bolder; padding: 20px">@title</div>
                            
                            <br/>
                            <div style="padding: 20px">

                                @if (com.Tickets.Any())
                                {
                                    var date = DateTime.Now;
                                    <MudGrid>
                                        @foreach (var tic in com.Tickets)
                                        {
                                            var amount = tic.ticketAmount.numberDecimal.ToString("C");
                                            <MudItem xs="12" sm="12" md="12" lg="9" xl="9" xxl="9">
                                                <div>
                                                    <div><b>@tic.ticketName</b></div>
                                                    <br/>
                                                    <div><b style="color: #e1901d">@amount</b></div>
                                                    <br/>
                                                    <div style=""> @tic.ticketDescription <br/> <small>Admits @tic.groupSize person(s) each</small> </div>
                                                    
                                                </div>
                                            </MudItem>

                                            <MudItem xs="12" sm="12" md="12" lg="3" xl="3" xxl="3">

                                                @if (tic.ticketInStock == 0 || date > tic.ticketSalesEndDateAndTime)
                                                {
                                                    
                                                }
                                                else
                                                {
                                                    <MudSelect T="int" Label="Quantity" bind-Value="quantity" Margin="Margin.Dense"  SelectedValuesChanged="@(async (value) => await GenerateCost(tic._id, com.EventTimeId, value))" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                                        <MudSelectItem T="int" Value="0" />
                                                        <MudSelectItem T="int" Value="1" />
                                                        <MudSelectItem T="int" Value="2" />
                                                        <MudSelectItem T="int" Value="3" />
                                                        <MudSelectItem T="int" Value="4" />
                                                        <MudSelectItem T="int" Value="5" />
                                                    </MudSelect>
                                                    <br/>
                                                }

                                            </MudItem>
                                            
                                            <MudDivider></MudDivider>
                                            <br/>
                                        }

                                    </MudGrid>
                                }
                                else
                                {
                                    <b>No Ticket found</b>
                                }
                            </div>

                         
                        }
                    </div>
                }
                else
                {
                    <br/>
                    <div style="text-align:center;">
                        <MudImage Src="images/backgrounds/nothing.png" Alt="No data image" Elevation="0" Height="60" Class="rounded-lg"/>
                        <br/>
                        <MudText Typo="Typo.h6"> <b>No ticket yet!</b></MudText>
                        <br>
                        <MudText> Once a ticket is created, you will see them here for purchase. </MudText>
                    </div>
                    
                }
            }
            
        </MudItem>
        
        
        <MudItem  xs="12" sm="12" md="5" lg="5" xl="5" xxl="5">

            <br /><br/>
            
            <div id="discovery-title">
                <span id="discovery-title-mid">Tickets Summary</span>
            </div>

            <br /><br/>
            
          
                @if (_generateCostProcessing)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7"/>
                }
                else
                {
                    <div>
                        @if (generateCost.Any())
                        {
                            <b>@generateCost.FirstOrDefault().tickets.Count ticket(s) selected</b>
                            
                            <MudDivider></MudDivider>
                            
                            <br/>

                            <MudGrid>
                                @foreach (var t in generateCost.FirstOrDefault().tickets )
                                {
                                    <MudItem xs="7" sm="7" md="7" lg="9" xl="9" xxl="9">
                                        <div style="line-height: 23px">
                                            <p>@t.ticketQuantity X @t.ticketName</p>
                                            <p style="color: #e1901d"><small>Including @t.totalTicketServiceFee.ToString("C") service fee</small></p>
                                        </div>
                                    </MudItem>
                                    <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                        <div style="font-size: 15px; text-align: end">
                                            <b>@t.totalTicketFeeAndServiceFee.ToString("C")</b>
                                        </div>
                                    </MudItem>
                                    <br/>
                                    <MudDivider></MudDivider>

                                }
                            </MudGrid>
                            
                            <br/><br/>
                            
                            <MudGrid>

                                <MudItem xs="7" sm="7" md="7" lg="9" xl="9" xxl="9">
                                    <p style="font-size: large">Fees</p>
                                </MudItem>
                                <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                    <div style="font-size: large; text-align: end">
                                    <b>@generateCost.FirstOrDefault().totalServiceFee.ToString("C")</b>
                                    </div>
                                </MudItem>
                                
                                <br/>

                                <MudItem xs="7" sm="7" md="7" lg="9" xl="9" xxl="9">
                                    <p style="font-size: large">Tickets</p>
                                </MudItem>
                                <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                    <div style="font-size: large; text-align: end">
                                        <b>@generateCost.FirstOrDefault().totalTicketFee.ToString("C")</b>
                                    </div>
                                </MudItem>
                                
                                <br/><br/>
                                <MudDivider></MudDivider>

                                <MudItem xs="7" sm="7" md="7" lg="9" xl="9" xxl="9">
                                    <p style="font-size: larger; font-weight: bold">Total Cost</p>
                                </MudItem>
                                <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                    <div style="font-size: larger; text-align: end">
                                        <b>@generateCost.FirstOrDefault().totalAmount.ToString("C")</b>
                                    </div>
                                </MudItem>

                            </MudGrid>
                        }
                        
                        <br/>
                        
                       
                    </div>
                }
            
            
            
        </MudItem>
        
    </MudGrid>
    

</MudContainer>



@code {


    [Parameter] public string? id { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ITicketService? _ticketService { get; set; }
    [Inject] IOrdersService? _orderService { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }

    IEnumerable<TimeAndTicketGroupingDto> _ticketList = new List<TimeAndTicketGroupingDto>();
    List<GenerateCostDto> generateCost = new();

    Dictionary<string, GenerateCostVM> TicketWithQuantity = new();

    private bool _processing { get; set; } = false;
    private bool _generateCostProcessing { get; set; } = false;
    private int quantity { get; set; }


    protected async override void OnInitialized()
    {
        _processing = true;
        var res = await _ticketService.GetTicketByEventId(id);

        if (res.result.code == ResponseCodes.ResponseCodeOk)
        {
            if (res.result.data is List<TicketDto> result)
            {
                _ticketList = result
                    .GroupBy(ticket => new { ticket.eventTimeDetails._id, ticket.eventTimeDetails.startDateAndTime })
                    .Select(group => new TimeAndTicketGroupingDto
                    {
                        EventTimeId = group.Key._id,
                        StartDateAndTime = group.Key.startDateAndTime,
                        Tickets = group.ToList()
                    }).ToList();
            }
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }

        _processing = false;
        StateHasChanged();
    }


    private async Task GenerateCost(string ticketId, string eventTimeId, IEnumerable<int> value)
    {
        _generateCostProcessing = true;

        if (value.FirstOrDefault() == 0)
        {
            TicketWithQuantity.Remove(ticketId);
            var item = generateCost.FirstOrDefault().tickets.Where(x => x.ticketId == ticketId);
            generateCost.FirstOrDefault().tickets.Remove(item.FirstOrDefault());
        }
        else
        {
            var generateCostVm = new GenerateCostVM()
            {
                eventId = id,
                eventTimeId = eventTimeId,
                ticketId = ticketId,
                quantity = value.FirstOrDefault().ToString()
            };
            TicketWithQuantity[ticketId] = generateCostVm;
        }
        
        var costVm = TicketWithQuantity.Values.ToList();
        if (costVm.Any())
        {
            var tics = await _orderService.GenerateCost(costVm);

            if (tics.result.code == ResponseCodes.ResponseCodeOk)
            {
                generateCost = (List<GenerateCostDto>)tics.result.data;
            }
            else
            {
                _snackbar.Add(tics.result.message, Severity.Error);
            }
        }
        else
        {
            generateCost = new List<GenerateCostDto>();
        }

        _generateCostProcessing = false;
        StateHasChanged();

    }

}
