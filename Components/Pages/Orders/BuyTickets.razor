@page "/orders/buy-tickets/{id}"

<PageTitle>Iv's - Buy Your Tickets</PageTitle>



@{
    CultureInfo nigeriaCulture = new CultureInfo("en-NG");
    nigeriaCulture.NumberFormat.CurrencySymbol = "₦";
    Thread.CurrentThread.CurrentCulture = nigeriaCulture;
    Thread.CurrentThread.CurrentUICulture = nigeriaCulture;
}


<MudContainer Fixed="false" MaxWidth="MaxWidth.Large" Style="background-color:white">

    <MudGrid Spacing="20">

        <MudItem xs="12" sm="12" md="6" lg="7" xl="7" xxl="7">

            <br/>

            @if (_processing)
            {
                <MudSkeleton Height="42px;"/>
                <MudSkeleton Height="42px;"/>
                <MudSkeleton Height="42px;"/>
            }
            else
            {
                if (_ticketList.Any())
                {

                    <br/>
                    <span id="discovery-title-mid">Contact Information</span>
                    <br/>

                    <div style="font-size:13px; line-height:25px">
                        We will send all the tickets you selected to the email details provided below after a successful purchase.
                    </div>

                    <br/>

                    <div>

                        <MudGrid>

                            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                                <label>Email</label>
                                <MudTextField InputType="InputType.Email" Label="Email" Margin="Margin.Dense" @bind-Value="model.email" For="@(() => model.email)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>First name</label>
                                <MudTextField Label="First Name" Margin="Margin.Dense" @bind-Value="model.firstName" For="@(() => model.firstName)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>Last name</label>
                                <MudTextField Label="Last Name" Margin="Margin.Dense" @bind-Value="model.lastName" For="@(() => model.lastName)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>Phone number</label>
                                <MudTextField Label="Phone" Margin="Margin.Dense" @bind-Value="model.phoneNumber" For="@(() => model.phoneNumber)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>Gender</label>
                                <MudSelect Label="Gender" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="model.gender" For="@(() => model.gender)">
                                    <MudSelectItem Value="@("M")">M</MudSelectItem>
                                    <MudSelectItem Value="@("F")">F</MudSelectItem>
                                </MudSelect>
                            </MudItem>

                        </MudGrid>

                    </div>

                    <br/>

                    <br/>
                    <br/>
                    <span id="discovery-title-mid">Buy your tickets</span>
                    <br/>
                    <br/>

                    <div>
                        @foreach (var com in _ticketList)
                        {
                            var title = $"{Convert.ToDateTime(com.StartDateAndTime).ToString("dddd, dd MMMM yyyy, HH:mm tt")}";

                            <div style="font-size: 15px; color: rgb(79 79 80); background-color: #fdf6fdfc; font-weight: bolder; padding: 20px">@title</div>

                            <div style="padding: 20px">

                                @if (com.Tickets.Any())
                                {
                                    var date = DateTime.Now;
                                    <MudGrid>
                                        @foreach (var tic in com.Tickets)
                                        {
                                            var amount = tic.ticketAmount.numberDecimal.ToString("C");
                                            <MudItem xs="8" sm="8" md="8" lg="9" xl="9" xxl="9">
                                                <div>
                                                    <div><b>@tic.ticketName</b> &nbsp;

                                                        @if(tic.ticketKind == Helpers.GroupTicket)
                                                        {
                                                            <MudChip T="string" Size="Size.Small" Color="Color.Secondary"><b>@tic.ticketKind</b></MudChip>
                                                        }

                                                    </div>
                                                    <br/>
                                                    <div><b style="color: #e1901d">@amount</b></div>
                                                    <br/>


                                                    <div style="">
                                                        <div><small style="text-align: center"><b>Available : @tic.ticketInStock</b></small></div>

                                                        <small> @tic.ticketDescription <br/> 
                                                            Admits @tic.groupSize person(s) each</small>
                                                    </div>

                                                </div>
                                            </MudItem>

                                            <MudItem xs="4" sm="4" md="4" lg="3" xl="3" xxl="3">

                                                @if (tic.ticketInStock == 0 || date > tic.ticketSalesEndDateAndTime)
                                                {
                                                    var notAvailable = tic.ticketInStock == 0 ? "Out of Stock" :
                                                        date > tic.ticketSalesEndDateAndTime ? "Sales Ended" : "";

                                                    <b style="color:crimson">@notAvailable</b>
                                                }
                                                else
                                                {
                                                    @if (tic.ticketKind == Helpers.GroupTicket)
                                                    {
                                                        <MudSelect T="int" Label="Quantity" bind-Value="quantity" Disabled="@_generateCostProcessing" Margin="Margin.Dense" SelectedValuesChanged="@(async (value) => await GenerateCost(tic._id, com.EventTimeId, value))" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                                            <MudSelectItem T="int" Value="0" />
                                                            <MudSelectItem T="int" Value="1" />
                                                            <MudSelectItem T="int" Value="2" />
                                                        </MudSelect>
                                                    }
                                                    else
                                                    {
                                                        <MudSelect T="int" Label="Quantity" bind-Value="quantity" Disabled="@_generateCostProcessing" Margin="Margin.Dense" SelectedValuesChanged="@(async (value) => await GenerateCost(tic._id, com.EventTimeId, value))" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                                            <MudSelectItem T="int" Value="0" />
                                                            <MudSelectItem T="int" Value="1" />
                                                            <MudSelectItem T="int" Value="2" />
                                                            <MudSelectItem T="int" Value="3" />
                                                            <MudSelectItem T="int" Value="4" />
                                                            <MudSelectItem T="int" Value="5" />
                                                        </MudSelect>
                                                    }

                                                    <br/>

                                                }

                                            </MudItem>

                                            <MudDivider></MudDivider>
                                            <br/>
                                        }

                                    </MudGrid>
                                }
                                else
                                {
                                    <b>No Ticket found</b>
                                }
                            </div>


                        }
                    </div>


                }
                else
                {
                    <br/>
                    <div style="text-align:center;">
                        <MudImage Src="images/backgrounds/nothing.png" Alt="No data image" Elevation="0" Height="60" Class="rounded-lg"/>
                        <br/>
                        <MudText Typo="Typo.h6"> <b>No ticket yet!</b></MudText>
                        <br>
                        <MudText> Once a ticket is created, you will see them here for purchase. </MudText>
                    </div>
                }
            }

        </MudItem>


        <MudItem xs="12" sm="12" md="5" lg="5" xl="5" xxl="5">

            <div class="sticky-header">

                <MudPaper Elevation="2" Outlined="false" Class="pa-7">
                    
                    <span id="discovery-title-mid">Tickets Summary</span>
                    <br /><br />


                    @if (_generateCostProcessing)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <div>
                            @if (generateCost.Any())
                            {
                                <b>@generateCost.FirstOrDefault().tickets.Count ticket(s) selected</b>

                                <MudDivider></MudDivider>

                                <br />

                                <MudGrid>
                                    @foreach (var t in generateCost.FirstOrDefault().tickets)
                                    {
                                        <MudItem xs="7" sm="7" md="7" lg="9" xl="9" xxl="9">
                                            <div style="line-height: 23px">
                                                <p>@t.ticketQuantity X @t.ticketName</p>
                                                <p style="color: #e1901d"><small>Including @t.totalTicketServiceFee.ToString("C") service fee</small></p>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                            <div style="font-size: small; text-align: end">
                                                <b>@t.totalTicketFeeAndServiceFee.ToString("C")</b>
                                            </div>
                                        </MudItem>
                                        <br />
                                        <hr />
                                    }
                                </MudGrid>

                                <br />
                                <br />

                                <MudGrid>
                                    <MudItem xs="7" sm="7" md="7" lg="8" xl="8" xxl="8">
                                        <p style="font-size: medium; font-weight: bold">Total Cost</p>
                                    </MudItem>
                                    <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                        <div style="font-size: medium; text-align: end">
                                            <b>@generateCost.FirstOrDefault().totalAmount.ToString("C")</b>
                                        </div>
                                    </MudItem>

                                </MudGrid>

                                <br />

                                <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Disabled="@_saveOrderProcessing" OnClick="@(async () => await ActionSaveOrder())" Style="height:50px; background:#e18501f7" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                                    @if (_saveOrderProcessing)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Processing</MudText>
                                    }
                                    else
                                    {
                                        <MudText><b>Buy Ticket</b></MudText>
                                    }
                                </MudButton>
                            }

                            <br />


                        </div>
                    }
                </MudPaper>

            </div>


        </MudItem>

    </MudGrid>


</MudContainer>



@code {
    [Parameter] public string? id { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ITicketService? _ticketService { get; set; }
    [Inject] IOrderService? _orderService { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] IPaymentOptionService _paymentOptionService { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    public AttendanceVm? model { get; set; }

    IEnumerable<TimeAndTicketGroupingDto> _ticketList = new List<TimeAndTicketGroupingDto>();
    IEnumerable<GetPaymentOptionsDto> _paymentOptionDto = new List<GetPaymentOptionsDto>();

    List<GenerateCostDto> generateCost = [];
    List<AttendanceVm> _attendanceVms = [];

    Dictionary<string, GenerateCostVM> TicketWithQuantity = new();

    private bool _processing { get; set; } = false;
    private bool _generateCostProcessing { get; set; } = false;
    private bool _saveOrderProcessing { get; set; } = false;
    private int quantity { get; set; }


    protected async override void OnInitialized()
    {
        model = new AttendanceVm();

        _processing = true;
        var res = await _ticketService.GetTicketByEventId(id);

        if (res.result.code == ResponseCodes.ResponseCodeOk)
        {
            if (res.result.data is List<TicketDto> result)
            {
                _ticketList = result
                    .GroupBy(ticket => new { ticket.eventTimeDetails._id, ticket.eventTimeDetails.startDateAndTime })
                    .Select(group => new TimeAndTicketGroupingDto
                    {
                        EventTimeId = group.Key._id,
                        StartDateAndTime = group.Key.startDateAndTime,
                        Tickets = group.ToList()
                    }).ToList();
            }

            await GetPaymentOptions();
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }

        _processing = false;
        StateHasChanged();
    }

    private async Task GetPaymentOptions()
    {
        var res = await _paymentOptionService.GetAllPaymentOptions();
        var data = res.result.data ?? new List<GetPaymentOptionsDto>();
        _paymentOptionDto = data;
    }



    private async Task GenerateCost(string ticketId, string eventTimeId, IEnumerable<int> value)
    {
        _generateCostProcessing = true;

        if (value.FirstOrDefault() == 0)
        {
            _generateCostProcessing = false;
            TicketWithQuantity.Remove(ticketId);

            if (generateCost.Any())
            {
                var item = generateCost.FirstOrDefault().tickets.Where(x => x.ticketId == ticketId);

                var ticketQty = item.FirstOrDefault().ticketQuantity;
                var totalTicketFee = item.FirstOrDefault().totalTicketFee;
                var totalServiceFee = item.FirstOrDefault().totalTicketServiceFee;

                if (item.Any())
                {
                    generateCost.FirstOrDefault().tickets.Remove(item.FirstOrDefault());
                    generateCost.FirstOrDefault().totalTicketPurchased -= ticketQty;
                    generateCost.FirstOrDefault().totalServiceFee -= totalServiceFee;
                    generateCost.FirstOrDefault().totalTicketFee -= totalTicketFee;
                    generateCost.FirstOrDefault().totalAmount -= (totalTicketFee + totalServiceFee);

                    if(generateCost.FirstOrDefault().tickets.Count == 0){
                        generateCost = [];
                    }
                }
            }
        }
        else
        {
            var generateCostVm = new GenerateCostVM()
                {
                    eventId = id,
                    eventTimeId = eventTimeId,
                    ticketId = ticketId,
                    quantity = value.FirstOrDefault().ToString()
                };
            TicketWithQuantity[ticketId] = generateCostVm;

            GenerateTicketCost(ticketId, eventTimeId, value.FirstOrDefault());


            // var costVm = TicketWithQuantity.Values.ToList();
            // if (costVm.Any())
            // {
            //     var tics = await _orderService.GenerateCost(costVm);

            //     if (tics.result.code == ResponseCodes.ResponseCodeOk)
            //     {
            //         generateCost = (List<GenerateCostDto>)tics.result.data;
            //     }
            //     else
            //     {
            //         _snackbar.Add(tics.result.message, Severity.Error);
            //         _generateCostProcessing = false;
            //         TicketWithQuantity.Remove(ticketId);

            //         if (generateCost.Any())
            //         {
            //             var item = generateCost.FirstOrDefault().tickets.Where(x => x.ticketId == ticketId);
            //             if (item.Any())
            //             {
            //                 generateCost.FirstOrDefault().totalTicketPurchased -= item.FirstOrDefault().ticketQuantity;
            //                 generateCost.FirstOrDefault().totalTicketFee -= item.FirstOrDefault().totalTicketFee;
            //                 generateCost.FirstOrDefault().totalServiceFee -= item.FirstOrDefault().totalTicketServiceFee;
            //                 generateCost.FirstOrDefault().totalAmount -= item.FirstOrDefault().totalTicketFeeAndServiceFee;
            //                 generateCost.FirstOrDefault().tickets.Remove(item.FirstOrDefault());
            //             }

            //         }
            //     }
            // }
            // else
            // {
            //     generateCost = [];
            // }
        }

        _generateCostProcessing = false;
        StateHasChanged();

    }




    private List<GenerateCostDto> GenerateTicketCost(string ticketId, string eventTimeId, int qty)
    {

        // get tickets
        var eventTimes = _ticketList.Where(x => x.EventTimeId == eventTimeId);
        var tickets = eventTimes.FirstOrDefault().Tickets.FirstOrDefault(x => x._id == ticketId && x.eventTimeId == eventTimeId);
        var paymentOptionId = tickets.paymentOptionId;
        var paymentOption = _paymentOptionDto.FirstOrDefault(x => x._id == paymentOptionId);

        if (paymentOption != null)
        {
            var percentage = Convert.ToDecimal(paymentOption.metaAmountPercentage.numberDecimal) / 100;

            var ticketAmt = Convert.ToDecimal(tickets.ticketAmount.numberDecimal);
            var charge = Math.Round(ticketAmt * percentage, 2);

            var vatPercentage = 7.5M / 100;
            var StampDuty = 0.00M;
            var capAmount = 0.00M;
            
            var cummulativeTotal = (ticketAmt * qty) + (charge * qty);
            
            if (cummulativeTotal >= 10000) StampDuty = 50M;

            var flwFee = cummulativeTotal * (1.41M / 100);
            if (flwFee >= 2000) flwFee = 2000;

            var flwVatAndStampDuty = flwFee * vatPercentage;
            flwVatAndStampDuty += StampDuty;
            
            cummulativeTotal += flwVatAndStampDuty;
            var serviceFeeSum = (qty * charge) + flwVatAndStampDuty ;
            var ticketFeeSum = (ticketAmt * qty);
            
            // var vatFee = Math.Round(newTicketFee * vatPercentage , 2);
            // var feePerTicket = vatFee + newTicketFee;
            //
            // var StampDuty = 0.00M;
            // if (((feePerTicket + ticketAmt) * qty) >= 10000) StampDuty = 50M;
            //
            // var serviceFee = (qty * feePerTicket) + StampDuty;
            // var totalQty = qty;
            // var ticketFee = Math.Round(qty * Convert.ToDecimal(tickets.ticketAmount.numberDecimal), 2);
            
            

            var tics = new TicketsObjects()
            {
                ticketId = ticketId,
                eventTimeId = eventTimeId,
                ticketKind = tickets.ticketKind,
                ticketName = tickets.ticketName,
                ticketQuantity = qty,
                ticketPrice = ticketAmt,
                ticketServiceFee = charge,
                totalTicketServiceFee = serviceFeeSum,
                totalTicketFee = ticketFeeSum,
                totalTicketFeeAndServiceFee = cummulativeTotal
            };
            
            if (generateCost.Any())
            {
                var item = generateCost.FirstOrDefault().tickets.Where(x => x.ticketId == ticketId);

                if (item.Any())
                {
                    var ticketQty = item.FirstOrDefault().ticketQuantity;
                    var totalTicketFee = item.FirstOrDefault().totalTicketFee;
                    var totalServiceFee = item.FirstOrDefault().totalTicketServiceFee;

                    generateCost.FirstOrDefault().tickets.Add(tics);
                    generateCost.FirstOrDefault().totalTicketPurchased += qty;
                    generateCost.FirstOrDefault().totalServiceFee += serviceFeeSum;
                    generateCost.FirstOrDefault().totalTicketFee += ticketFeeSum;
                    generateCost.FirstOrDefault().totalAmount += cummulativeTotal;

                    generateCost.FirstOrDefault().tickets.Remove(item.FirstOrDefault());
                    generateCost.FirstOrDefault().totalTicketPurchased -= ticketQty;
                    generateCost.FirstOrDefault().totalServiceFee -= totalServiceFee;
                    generateCost.FirstOrDefault().totalTicketFee -= totalTicketFee;
                    generateCost.FirstOrDefault().totalAmount -= (totalTicketFee + totalServiceFee);

                    if (generateCost.FirstOrDefault().tickets.Count == 0)
                    {
                        generateCost = [];
                    }
                }
                else{
                    generateCost.FirstOrDefault().tickets.Add(tics);
                    generateCost.FirstOrDefault().totalTicketPurchased += qty;
                    generateCost.FirstOrDefault().totalServiceFee += serviceFeeSum;
                    generateCost.FirstOrDefault().totalTicketFee += ticketFeeSum;
                    generateCost.FirstOrDefault().totalAmount += (cummulativeTotal);
                }

            }
            else
            {
                generateCost = new List<GenerateCostDto>(){

                   new GenerateCostDto(){
                       totalTicketPurchased = qty,
                       totalAmount = (cummulativeTotal),
                       totalServiceFee = serviceFeeSum,
                       totalTicketFee = ticketFeeSum,
                       tickets = new List<TicketsObjects>{tics}
                   }
                };
            }

            return generateCost;
        }
        else
        {
            return [];
        }
    }


    private async Task ActionSaveOrder()
    {
        _saveOrderProcessing = true;
        var context = new ValidationContext(model, serviceProvider: null, items: null);
        var results = new List<ValidationResult>();
        Validator.TryValidateObject(model, context, results, true);

        if (results.Any())
        {
            foreach (var er in results)
                _snackbar.Add(er.ErrorMessage, Severity.Error);
        }
        else
        { 
            if (generateCost.Any())
            {
                foreach (var c in generateCost.FirstOrDefault().tickets)
                {
                    var dic = TicketWithQuantity[c.ticketId];
                    var attendance = new AttendanceVm()
                        {
                            ivsEventId = id,
                            eventTimeId = c.eventTimeId,
                            ticketId = c.ticketId,
                            ticketQuantity = c.ticketQuantity.ToString(),
                            firstName = model.firstName,
                            lastName = model.lastName,
                            email = model.email,
                            phoneNumber = model.phoneNumber,
                            gender = model.gender,
                            ticketPrice = c.ticketPrice.ToString(),
                            ticketServiceFee = c.ticketServiceFee.ToString(),
                            totalTicketFee = c.totalTicketFee.ToString(),
                            totalTicketServiceFee = c.totalTicketServiceFee.ToString(),
                            totalTicketFeeAndServiceFee = c.totalTicketFeeAndServiceFee.ToString(),
                        };
                    _attendanceVms.Add(attendance);
                }

                var orderVM = new OrdersVM()
                {
                    OrderRequest = new OrderRequest()
                    {
                        ivsEventId = id,
                        totalOrderQuantity = generateCost?.FirstOrDefault()?.totalTicketPurchased.ToString(),
                        totalServiceFee = generateCost?.FirstOrDefault()?.totalServiceFee.ToString(),
                        totalTicketFee = generateCost?.FirstOrDefault()?.totalTicketFee.ToString(),
                        totalFee = generateCost?.FirstOrDefault()?.totalAmount.ToString(),
                    },
                    AttendeesRequest = _attendanceVms
                };

                var order = await _orderService.SaveOrder(orderVM);

                if (order.result.code == ResponseCodes.ResponseCodeOk)
                {
                    var orderResult = (OrderDto)order.result.data;
                    _navigate.NavigateTo($"/orders/payment-method/{orderResult._id}");
                    _snackbar.Add(order.result.message, Severity.Success);
                    _saveOrderProcessing = false;
                }
                else
                {
                    _saveOrderProcessing = false;
                    _snackbar.Add(order.result.message, Severity.Error);
                }
            }
            else
            {
                _snackbar.Add("Something went wrong, no tickets were found. Please try again later", Severity.Error);
            }
        }

        _saveOrderProcessing = false;
    }

}
