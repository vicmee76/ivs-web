@page "/orders/buy-tickets/{id}"

<PageTitle>Iv's - Buy Your Tickets</PageTitle>



@{
    CultureInfo nigeriaCulture = new CultureInfo("en-NG");
    nigeriaCulture.NumberFormat.CurrencySymbol = "₦";
    Thread.CurrentThread.CurrentCulture = nigeriaCulture;
    Thread.CurrentThread.CurrentUICulture = nigeriaCulture;
}


<MudContainer MaxWidth="MaxWidth.Large">

    <MudGrid Spacing="15">

        <MudItem xs="12" sm="12" md="6" lg="7" xl="7" xxl="7">

            <br/>

            @if (_processing)
            {
                <MudSkeleton Height="42px;"/>
                <MudSkeleton Height="42px;"/>
                <MudSkeleton Height="42px;"/>
            }
            else
            {
                if (_ticketList.Any())
                {
                    <br/>
                    <span id="discovery-title-mid">Contact Information</span>
                    <br/>
                    <br/>
                   
                    <div style="font-size:13px; line-height:25px">
                        Enter your contact info; We will send all the tickets you selected to the email details provided below after a successful purchase.
                    </div>

                    <br/>

                    <div>

                        <MudGrid>

                            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                                <label>Email</label>
                                <MudTextField InputType="InputType.Email" Label="Email" Margin="Margin.Dense" @bind-Value="model.email" For="@(() => model.email)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>First name</label>
                                <MudTextField Label="First Name" Margin="Margin.Dense" @bind-Value="model.firstName" For="@(() => model.firstName)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>Last name</label>
                                <MudTextField Label="Last Name" Margin="Margin.Dense" @bind-Value="model.lastName" For="@(() => model.lastName)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>Phone number</label>
                                <MudTextField Label="Phone" Margin="Margin.Dense" @bind-Value="model.phoneNumber" For="@(() => model.phoneNumber)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="6" lg="6" xl="6" xxl="6">
                                <label>Gender</label>
                                <MudSelect Label="Gender" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="model.gender" For="@(() => model.gender)">
                                    <MudSelectItem Value="@("M")">M</MudSelectItem>
                                    <MudSelectItem Value="@("F")">F</MudSelectItem>
                                </MudSelect>
                            </MudItem>

                        </MudGrid>

                    </div>
                    
                    
                    <br/>   
                    <br/>   
                    <br/>
                    <span id="discovery-title-mid">Buy Your Tickets</span>
                    <br/>
                    <br/>

                    <div>
                        @foreach (var com in _ticketList)
                        {
                            var title = $"{Convert.ToDateTime(com.StartDateAndTime).ToString("ddd, d MMM. yyyy, HH:mm tt")}";

                            <div style="font-size: 18px; color: #1e0a3c; background-color: #fdf6fdfc; font-weight: bolder; padding: 20px">@title</div>

                            <div style="padding: 20px">

                                @if (com.Tickets.Any())
                                {
                                    var date = DateTime.Now;
                                    <MudGrid>
                                        @foreach (var tic in com.Tickets)
                                        {
                                            var amount = tic.ticketAmount.numberDecimal.ToString("C");
                                            <MudItem xs="8" sm="8" md="8" lg="9" xl="9" xxl="9">
                                                <div>
                                                    <div><b>@tic.ticketName</b> &nbsp;

                                                        @if(tic.ticketKind == Helpers.GroupTicket)
                                                        {
                                                            <MudChip T="string" Size="Size.Small" Color="Color.Error"><b>@tic.ticketKind</b></MudChip>
                                                        }

                                                    </div>
                                                    <br/>
                                                    <div><b style="color: #e1901d">@amount</b></div>
                                                    <br/>


                                                    <div style="">
                                                        <div><small style="text-align: center"><b>Available : @tic.ticketInStock</b></small></div>

                                                        <small> @tic.ticketDescription <br/> 
                                                            Admits @tic.groupSize person(s) each</small>
                                                    </div>

                                                </div>
                                            </MudItem>

                                            <MudItem xs="4" sm="4" md="4" lg="3" xl="3" xxl="3">

                                                @if (tic.ticketInStock == 0 || date > tic.ticketSalesEndDateAndTime)
                                                {
                                                    var notAvailable = tic.ticketInStock == 0 ? "Out of Stock" :
                                                        date > tic.ticketSalesEndDateAndTime ? "Sales Ended" : "";

                                                    <b style="color:crimson">@notAvailable</b>
                                                }
                                                else
                                                {
                                                    @if (tic.ticketKind == Helpers.GroupTicket)
                                                    {
                                                        <MudSelect T="int" Label="Quantity" bind-Value="quantity" Disabled="@_generateCostProcessing" Margin="Margin.Dense" SelectedValuesChanged="@(async (value) => await GenerateCost(tic._id, com.EventTimeId, value))" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                                            <MudSelectItem T="int" Value="0" />
                                                            <MudSelectItem T="int" Value="1" />
                                                            <MudSelectItem T="int" Value="2" />
                                                        </MudSelect>
                                                    }
                                                    else
                                                    {
                                                        <MudSelect T="int" Label="Quantity" bind-Value="quantity" Disabled="@_generateCostProcessing" Margin="Margin.Dense" SelectedValuesChanged="@(async (value) => await GenerateCost(tic._id, com.EventTimeId, value))" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                                            <MudSelectItem T="int" Value="0" />
                                                            <MudSelectItem T="int" Value="1" />
                                                            <MudSelectItem T="int" Value="2" />
                                                            <MudSelectItem T="int" Value="3" />
                                                            <MudSelectItem T="int" Value="4" />
                                                            <MudSelectItem T="int" Value="5" />
                                                        </MudSelect>
                                                    }

                                                    <br/>

                                                }

                                            </MudItem>

                                            <MudDivider></MudDivider>
                                            <br/>
                                        }

                                    </MudGrid>
                                }
                                else
                                {
                                    <b>No Ticket found</b>
                                }
                            </div>
                            
                            <br/> 
                        }
                    </div>
                    
                }
                else
                {
                    <br/>
                    <div style="text-align:center;">
                        <MudImage Src="images/backgrounds/nothing.png" Alt="No data image" Elevation="0" Height="60" Class="rounded-lg"/>
                        <br/>
                        <MudText Typo="Typo.h6"> <b>No ticket yet!</b></MudText>
                        <br>
                        <MudText> Once a ticket is created, you will see them here for purchase. </MudText>
                    </div>
                }
            }

        </MudItem>


        <MudItem xs="12" sm="12" md="5" lg="5" xl="5" xxl="5">

            <br/>
            <br/>
            <div class="sticky-header">

                <MudPaper Elevation="2" Outlined="false" Class="pa-7">
                    
                    <span id="discovery-title-mid">Tickets Summary</span>
                    <br /><br />


                    @if (_generateCostProcessing)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <div>
                            @if (generateCost.Any())
                            {
                                <b>Purchasing @generateCost.FirstOrDefault().tickets.Count ticket(s)</b>

                                <MudDivider></MudDivider>

                                <br />

                                <MudGrid>
                                    
                                    @{
                                        var groupedCost = generateCost.FirstOrDefault().tickets
                                            .GroupBy(x => x.ticketId)
                                            .Select(g => new
                                            {
                                                TicketId = g.Key,
                                                TicketName = g.First().ticketName, 
                                                TicketQuantity = g.Sum(x => x.ticketQuantity), 
                                                TicketFee = g.Sum(x => x.ticketPrice)
                                            }).OrderBy(x=> x.TicketFee).ToList();
                                    }
                                    @foreach (var t in groupedCost)
                                    {
                                        <MudItem xs="7" sm="7" md="7" lg="9" xl="9" xxl="9">
                                            <div style="line-height: 23px">
                                                <p>@t.TicketQuantity x @t.TicketName</p>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                            <div style="text-align: end">
                                                @t.TicketFee.ToString("C")
                                            </div>
                                        </MudItem>
                                        <br/>
                                    }
                                </MudGrid>

                                <br />
                                <MudDivider></MudDivider>
                                <br />

                                <MudGrid>

                                    <MudItem xs="7" sm="7" md="7" lg="8" xl="8" xxl="8">
                                        <p style="font-size: medium;">Fees</p>
                                    </MudItem>
                                    <MudItem xs="5" sm="5" md="5" lg="4" xl="4" xxl="4">
                                        <div style="font-size: medium; text-align: end">
                                            @generateCost.FirstOrDefault().totalServiceFee.ToString("C")
                                        </div>
                                    </MudItem>
                                    <br/><br/>
                                    <MudItem xs="7" sm="7" md="7" lg="8" xl="8" xxl="8">
                                        <p style="font-size: medium; font-weight: bold">Total Cost</p>
                                    </MudItem>
                                    <MudItem xs="5" sm="5" md="5" lg="4" xl="4" xxl="4">
                                        <div style="font-size: medium; text-align: end">
                                            <b>@generateCost.FirstOrDefault().totalAmount.ToString("C")</b>
                                        </div>
                                    </MudItem>

                                </MudGrid>

                                <br /><br />
                                
                                <MudCheckBox T="bool" @bind-Value="hasAgreed" Size="Size.Small" Required="true">
                                    <small>Agree to</small>
                                    <MudLink Target="_blank" Href="/terms-and-conditions"> <small>Terms & Conditions</small></MudLink>,
                                     <MudLink Target="_blank" Href="/privacy-policy" Typo="Typo.body2"> Privacy Policy </MudLink>, 
                                     <MudLink Target="_blank" Href="/service-agreement" Typo="Typo.body2"> Service Agreement </MudLink> 
                                    @* <MudLink Href="/terms-and-conditions"> <small>Refund Policy</small></MudLink> *@
                                </MudCheckBox>
                                
                                <br/>
                                
                                <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Disabled="@_saveOrderProcessing" OnClick="@(async () => await ActionSaveOrder())" Style="height:50px; background:#56375C" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5 sticky-button">
                                    @if (_saveOrderProcessing)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Processing</MudText>
                                    }
                                    else
                                    {
                                        <MudText><b>Pay @generateCost.FirstOrDefault().totalAmount.ToString("C")</b></MudText>
                                    }
                                </MudButton>
                            }

                            <br />


                        </div>
                    }
                </MudPaper>

            </div>


        </MudItem>

    </MudGrid>


</MudContainer>



@code {
    [Parameter] public string? id { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ITicketService? _ticketService { get; set; }
    [Inject] IOrderService? _orderService { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] IConfiguration? _config { get; set; }
    [Inject] IPaymentOptionService _paymentOptionService { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    public AttendanceVm? model { get; set; }

    IEnumerable<TimeAndTicketGroupingDto> _ticketList = new List<TimeAndTicketGroupingDto>();
    IEnumerable<GetPaymentOptionsDto> _paymentOptionDto = new List<GetPaymentOptionsDto>();

    List<GenerateCostDto> generateCost = [];
    List<AttendanceVm> _attendanceVms = [];
    
    GetEventDetailsDto _events = new();
    private string eventName { get; set; }

    Dictionary<string, GenerateCostVM> TicketWithQuantity = new();

    private bool _processing { get; set; } = false;
    private bool _generateCostProcessing { get; set; } = false;
    private bool _saveOrderProcessing { get; set; } = false;
    private bool hasAgreed { get; set; } = false;
    private int quantity { get; set; }


    protected async override void OnInitialized()
    {
        model = new AttendanceVm();

        _processing = true;
        var res = await _ticketService.GetTicketByEventId(id);
        
        var res2 = await _eventService.GetEventDetails(id);
        if (res.result.code == ResponseCodes.ResponseCodeOk)
        {
            _events = res2.result.data;
            eventName = _events.eventName;
            
            if (res.result.code == ResponseCodes.ResponseCodeOk)
            {
                if (res.result.data is List<TicketDto> result)
                {
                    _ticketList = result
                        .GroupBy(ticket => new { ticket.eventTimeDetails._id, ticket.eventTimeDetails.startDateAndTime })
                        .Select(group => new TimeAndTicketGroupingDto
                        {
                            EventTimeId = group.Key._id,
                            StartDateAndTime = group.Key.startDateAndTime,
                            Tickets = group.ToList()
                        }).ToList();
                }

                await GetPaymentOptions();
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }

        
        _processing = false;
        StateHasChanged();
    }

    private async Task GetPaymentOptions()
    {
        var res = await _paymentOptionService.GetAllPaymentOptions();
        var data = res.result.data ?? new List<GetPaymentOptionsDto>();
        _paymentOptionDto = data;
    }



    private async Task GenerateCost(string ticketId, string eventTimeId, IEnumerable<int> value)
    {
        _generateCostProcessing = true;

        if (value.FirstOrDefault() == 0)
        {
            _generateCostProcessing = false;
            TicketWithQuantity.Remove(ticketId);

            if (generateCost.Any())
            {
                var item = generateCost.FirstOrDefault().tickets.Where(x => x.ticketId == ticketId);
                if (item.Any())
                {
                    var ticketQty = item.Sum(x =>x.ticketQuantity);
                    var totalTicketFee = Math.Round(item.Sum(x => x.totalTicketFee), 2);
                    var totalServiceFee = Math.Round(item.Sum(x =>x.totalTicketServiceFee), 2);
                    
                    generateCost.FirstOrDefault().totalTicketPurchased -= ticketQty;
                    generateCost.FirstOrDefault().totalServiceFee -= Math.Round(totalServiceFee, 2);
                    generateCost.FirstOrDefault().totalTicketFee -= Math.Round(totalTicketFee, 2);
                    generateCost.FirstOrDefault().totalAmount -= Math.Round((totalTicketFee + totalServiceFee), 2);
                    
                    generateCost.FirstOrDefault().tickets.RemoveAll(x => x.ticketId == ticketId);
                    
                    if (generateCost.FirstOrDefault().tickets.Count == 0)
                        generateCost = [];
                }
            }
        }
        else
        {
            var generateCostVm = new GenerateCostVM()
                {
                    eventId = id,
                    eventTimeId = eventTimeId,
                    ticketId = ticketId,
                    quantity = value.FirstOrDefault().ToString()
                };
            TicketWithQuantity[ticketId] = generateCostVm;

            GenerateTicketCost(ticketId, eventTimeId, value.FirstOrDefault());

        }

        _generateCostProcessing = false;
        StateHasChanged();

    }




    private List<GenerateCostDto> GenerateTicketCost(string ticketId, string eventTimeId, int qty)
    {
        // get tickets
        var eventTimes = _ticketList.Where(x => x.EventTimeId == eventTimeId);
        var tickets = eventTimes.FirstOrDefault().Tickets.FirstOrDefault(x => x._id == ticketId && x.eventTimeId == eventTimeId);
        var paymentOptionId = tickets.paymentOptionId;
        var paymentOption = _paymentOptionDto.FirstOrDefault(x => x._id == paymentOptionId);

        if (paymentOption != null)
        {
            if (generateCost.Any())
            {
                var item = generateCost.FirstOrDefault().tickets.Where(x => x.ticketId == ticketId);
                if (item.Any())
                {
                    var ticketQty = item.Sum(x =>x.ticketQuantity);
                    var totalTicketFee = Math.Round(item.Sum(x => x.totalTicketFee), 2);
                    var totalServiceFee = Math.Round(item.Sum(x =>x.totalTicketServiceFee), 2);
                    
                    generateCost.FirstOrDefault().totalTicketPurchased -= ticketQty;
                    generateCost.FirstOrDefault().totalServiceFee -= Math.Round(totalServiceFee, 2);
                    generateCost.FirstOrDefault().totalTicketFee -= Math.Round(totalTicketFee, 2);
                    generateCost.FirstOrDefault().totalAmount -= Math.Round((totalTicketFee + totalServiceFee), 2);
                    
                    generateCost.FirstOrDefault().tickets.RemoveAll(x => x.ticketId == ticketId);
                    
                    if (generateCost.FirstOrDefault().tickets.Count == 0)
                        generateCost = [];
                }
            }

            for (int i = 0; i < qty; i++)
            {
                // ivs percentage
                var percentage = Math.Round(Convert.ToDecimal(paymentOption.metaAmountPercentage.numberDecimal) / 100, 2);
                var vatPercentage = _config.GetValue<decimal>("Fees:Vat") / 100;
                var StampDuty = 0.00M;
                var capAmount = 0.00M;

                var ticketAmt = Math.Round(Convert.ToDecimal(tickets.ticketAmount.numberDecimal), 2);
                var charge = Math.Round(ticketAmt * percentage, 2);
                var ivsVat = Math.Round(charge * vatPercentage, 2);
                var chargeAmount = Math.Round((charge + ivsVat), 2);

                var cummulativeTotal = Math.Round((ticketAmt * 1) + (chargeAmount * 1), 2);

                if (cummulativeTotal >= _config.GetValue<int>("Fees:StampDutyAmount")) StampDuty = _config.GetValue<int>("Fees:StampDutyFee");
                var flwFee = Math.Round((cummulativeTotal * (_config.GetValue<decimal>("Fees:FlwPercentage") / 100)), 2);
                if (flwFee >= _config.GetValue<int>("Fees:FlwFeeCapAmount")) flwFee = _config.GetValue<int>("Fees:FlwFeeCapAmount");

                var flwVatAndStampDuty = Math.Round((flwFee * vatPercentage), 2);
                flwVatAndStampDuty += StampDuty;

                cummulativeTotal += flwVatAndStampDuty;
                var serviceFeeSum = Math.Round(((1 * chargeAmount) + flwVatAndStampDuty), 2);
                var ticketFeeSum = Math.Round((ticketAmt * 1), 2);

                var tics = new TicketsObjects()
                {
                    ticketId = ticketId,
                    eventTimeId = eventTimeId,
                    ticketKind = tickets.ticketKind,
                    ticketName = tickets.ticketName,
                    ticketQuantity = 1,
                    ticketPrice = Math.Round(ticketAmt, 2),
                    ticketServiceFee = Math.Round(chargeAmount, 2),
                    totalTicketServiceFee = Math.Round(serviceFeeSum, 2),
                    totalTicketFee = Math.Round(ticketFeeSum, 2),
                    totalTicketFeeAndServiceFee = Math.Round(cummulativeTotal, 2)
                };

                if (generateCost.Any())
                {
                    generateCost.FirstOrDefault().tickets.Add(tics);
                    generateCost.FirstOrDefault().totalTicketPurchased += 1;
                    generateCost.FirstOrDefault().totalServiceFee += Math.Round(serviceFeeSum, 2);
                    generateCost.FirstOrDefault().totalTicketFee += Math.Round(ticketFeeSum, 2);
                    generateCost.FirstOrDefault().totalAmount += Math.Round((cummulativeTotal), 2);
                    generateCost.FirstOrDefault().percentageCharge = percentage;
                }
                else
                {
                    generateCost = new List<GenerateCostDto>()
                    {
                        new()
                        {
                            totalTicketPurchased = 1,
                            totalAmount = Math.Round((cummulativeTotal), 2),
                            totalServiceFee = Math.Round(serviceFeeSum, 2),
                            totalTicketFee = Math.Round(ticketFeeSum, 2),
                            percentageCharge = percentage,
                            tickets = new List<TicketsObjects> { tics }
                        }
                    };
                }
            }

            return generateCost;
        }
        else
        {
            return [];
        }
    }


    private async Task ActionSaveOrder()
    {
        _saveOrderProcessing = true;
        var context = new ValidationContext(model, serviceProvider: null, items: null);
        var results = new List<ValidationResult>();
        Validator.TryValidateObject(model, context, results, true);

        if (results.Any())
        {
            foreach (var er in results)
                _snackbar.Add(er.ErrorMessage, Severity.Error);
        }
        else
        {
            if (hasAgreed)
            {
                if (generateCost.Any())
                {
                    foreach (var c in generateCost.FirstOrDefault().tickets)
                    {
                        var dic = TicketWithQuantity[c.ticketId];
                        var attendance = new AttendanceVm()
                        {
                            ivsEventId = id,
                            eventTimeId = c.eventTimeId,
                            ticketId = c.ticketId,
                            ticketQuantity = c.ticketQuantity.ToString(),
                            firstName = model.firstName,
                            lastName = model.lastName,
                            email = model.email,
                            phoneNumber = model.phoneNumber,
                            gender = model.gender,
                            ticketPrice = c.ticketPrice.ToString(),
                            ticketServiceFee = c.ticketServiceFee.ToString(),
                            totalTicketFee = c.totalTicketFee.ToString(),
                            totalTicketServiceFee = c.totalTicketServiceFee.ToString(),
                            totalTicketFeeAndServiceFee = c.totalTicketFeeAndServiceFee.ToString(),
                        };
                        _attendanceVms.Add(attendance);
                    }

                    var orderVM = new OrdersVM()
                    {
                        OrderRequest = new OrderRequest()
                        {
                            ivsEventId = id,
                            totalOrderQuantity = generateCost?.FirstOrDefault()?.totalTicketPurchased.ToString(),
                            totalServiceFee = generateCost?.FirstOrDefault()?.totalServiceFee.ToString(),
                            totalTicketFee = generateCost?.FirstOrDefault()?.totalTicketFee.ToString(),
                            totalFee = generateCost?.FirstOrDefault()?.totalAmount.ToString(),
                            percentageCharge = generateCost?.FirstOrDefault()?.percentageCharge.ToString()
                        },
                        AttendeesRequest = _attendanceVms
                    };

                    var order = await _orderService.SaveOrder(orderVM);

                    if (order.result.code == ResponseCodes.ResponseCodeOk)
                    {
                        var orderResult = (OrderDto)order.result.data;
                        _navigate.NavigateTo($"/orders/payment-method/{orderResult._id}");
                        _snackbar.Add(order.result.message, Severity.Success);
                        _saveOrderProcessing = false;
                    }
                    else
                    {
                        _saveOrderProcessing = false;
                        _snackbar.Add(order.result.message, Severity.Error);
                    }
                }
                else
                {
                    _snackbar.Add("Something went wrong, no tickets were found. Please try again later", Severity.Error);
                }
            }
            else
            {
                _snackbar.Add("Kindly agree to our terms and conditions before proceeding", Severity.Error);
            }
        }

        _saveOrderProcessing = false;
    }

}
