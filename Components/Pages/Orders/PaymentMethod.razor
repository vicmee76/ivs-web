@page "/orders/payment-method/{id}"


@{
    CultureInfo nigeriaCulture = new CultureInfo("en-NG");
    Thread.CurrentThread.CurrentCulture = nigeriaCulture;
    Thread.CurrentThread.CurrentUICulture = nigeriaCulture;
}


<PageTitle>Iv's - Select Payment Method</PageTitle>


<MudContainer>

    <br />

    <center>
        <MudPaper Elevation="0" Outlined="false" MaxWidth="650px" Square="false" Class="ma-2 pa-10">
            <div style="text-align:left">

                <div id="reg-title">Choose a payment method.</div>
                <br />
                <MudDivider></MudDivider>
                <br />

                @if (_processing)
                {
                    <br />
                    <div style="text-align:center">
                        <MudProgressCircular Color="Color.Secondary" Style="height:40px;width:40px;" Indeterminate="true" />
                    </div>
                }
                else
                {

                    <div>

                        <div style="text-align: center; background-color:#ffefef; padding:20px">
                            <h1> @totalAmount</h1>
                        </div>

                        <br />
                        <MudDivider></MudDivider>
                        <br />

                        <div>

                            <MudRadioGroup @bind-Value="@paymentGateWay">
                                <MudRadio Value="@("Flutterwave")" Color="Color.Secondary">
                                    <div style="display: flex; align-items: center; padding:20px">
                                        <MudImage Src="images/backgrounds/flutterwavelogo.png" Alt="Flutterwave logo" Elevation="0" Height="40" Class="rounded-circle" />
                                        <span style="font-size:14px; font-weight:bold; margin-left: 10px;">Pay with Flutterwave</span>
                                    </div>
                                </MudRadio>
                            </MudRadioGroup>

                        </div>

                        <br />

                        <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Disabled="@_actionProcessing" OnClick="@( async () => await ActionMakePayment())" Style="height:50px; background:#e18501f7" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                            @if (_actionProcessing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText><b>Pay Now</b></MudText>
                            }
                        </MudButton>

                    </div>
                }


            </div>
        </MudPaper>
    </center>
</MudContainer>



@code {

    [Parameter] public string? id { get; set; }
    [Inject] IOrdersService? _orderService { get; set; }
    [Inject] IPaymentService? _paymentService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }

    public bool _processing { get; set; } = false;
    public bool _actionProcessing { get; set; } = false;

    public string? paymentGateWay { get; set; }

    public string totalAmount { get; set; }

    public MakePaymentVM paymentVM { get; set; }

    protected async override void OnInitialized()
    {
        _processing = true;

        var res = await _orderService.GetOrderById(id);

        if (res.result.code == ResponseCodes.ResponseCodeOk)
        {
            if (res.result.data is List<OrderDto> result)
                totalAmount = result.FirstOrDefault().totalFee.numberDecimal.ToString("C");
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }
        _processing = false;
        StateHasChanged();
    }


    private async Task ActionMakePayment()
    {
        _actionProcessing = true;

        if (string.IsNullOrEmpty(paymentGateWay))
        {
            _snackbar.Add("Please choose a payment method", Severity.Error);
        }
        else
        {
            paymentVM = new MakePaymentVM();
            paymentVM.orderId = id;
            paymentVM.paymentGateWay = paymentGateWay.ToUpper();

            var res = await _paymentService.GeneratePaymentLink(paymentVM);

            if (res.result.code == ResponseCodes.ResponseCodeOk)
            {
                if (res.result.data is List<PaymentDto> result)
                {
                    _navigate.NavigateTo(result.FirstOrDefault().link.ToString());
                }
                else
                {
                    _snackbar.Add("Something went wrong trying to connect to payment gateway, please trying again later.", Severity.Error);
                }
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }


        }

        _actionProcessing = false;
    }


}
