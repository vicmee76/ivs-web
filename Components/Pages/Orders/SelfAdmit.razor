@page "/ivs/self-admit/{eventId}/{code}"

<PageTitle>Iv's - Self Admit</PageTitle>

<MudContainer Fixed="false" MaxWidth="MaxWidth.Large" Style="background-color:white">

   <MudMessageBox @ref="admituserMessageBox" Title="Self Admit" CancelText="Cancel" YesText="Admit" Style="padding:20px;">
      <MessageContent>
        Are you sure you want to admit yourself to this event ?
      </MessageContent>
      <YesButton>
         <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary">Admit</MudButton>
      </YesButton>
      <CancelButton>
         <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default">Cancel</MudButton>
      </CancelButton>
   </MudMessageBox>


   <MudContainer>
      <br/><br/><br/>
      <center>
         <MudPaper Elevation="0" Outlined="false" MaxWidth="650px" Square="false" Style="text-align: left">

            <span id="event-title">@_events.eventName</span>
            
            <br/>
            <br/>
            
            <MudText Typo="Typo.body1" Style="line-height: 30px"> Admit yourself into this event; enter your ticket code sent to your email... </MudText>
            
            <br/>
            <br/>
            
            <MudPaper Elevation="0">

               <MudTextField InputType="InputType.Text" Label="Your Ticket Code" Margin="Margin.None" HelperText="Enter your ticket code" @bind-Value="ticketCode" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" OnClearButtonClick="ActionClearTicketCode"/>

               <MudButton FullWidth="false" Disabled="@_isTicketFound" OnClick="@(async () => await ActionGetTicket(ticketCode))" Style="height:50px; background-color:#56375C; width:150px" Color="Color.Primary" Variant="Variant.Filled" Class="mt-3">
                  @if (_getTicketProcessing)
                  {
                     <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                     <MudText Class="ms-2">Processing</MudText>
                  }
                  else
                  {
                     <MudText><b>Get Ticket</b></MudText>
                  }
               </MudButton>
               
               
               <br/><br/>
               <br/><br/>
               
               <div>
                  
                 

                     @if (_userAttendance.paginatedResults != null)
                     {

                        <MudGrid Spacing="5">
                           <MudItem xs="12" sm="12" md="12" lg="6" xl="6" xxl="6">
                              <div>
                                 
                                 @if (@_userAttendance.paginatedResults.FirstOrDefault().isActive || _isAdmitted)
                                 {
                                    <MudText Typo="Typo.h5" Color="Color.Success"> <b> ADMITTED </b></MudText>
                                    <br/>
                                 }
                                 else
                                 {
                                    <MudText Typo="Typo.h5" Color="Color.Default"> <b> PENDING </b></MudText>
                                    <br/>
                                 }

                                 <MudText Typo="Typo.body2">Name : <b>@_userAttendance.paginatedResults.FirstOrDefault().firstName @_userAttendance.paginatedResults.FirstOrDefault().lastName </b></MudText>
                                 <br/>
                                 <MudText Typo="Typo.body2">Email : <b>@_userAttendance.paginatedResults.FirstOrDefault().email</b></MudText>
                                 <br/>
                                 <MudText Typo="Typo.body2">Phone : <b>@_userAttendance.paginatedResults.FirstOrDefault().phoneNumber</b></MudText>
                              </div>
                           </MudItem>
                           <MudItem xs="12" sm="12" md="12" lg="6" xl="6" xxl="6">
                              <div>Ticket</div>
                              <MudDivider DividerType="DividerType.FullWidth" Class="my-6"/>

                              <MudGrid>
                                 @foreach (var t in _userAttendance.paginatedResults)
                                 {
                                    <MudItem xs="7" sm="7" md="7" lg="9" xl="9" xxl="9">
                                       <div style="line-height: 23px; font-size: small">
                                          <b>@t.ticketQuantity X @t.ticketDetails.FirstOrDefault().ticketName</b>
                                       </div>
                                    </MudItem>
                                    <MudItem xs="5" sm="5" md="5" lg="3" xl="3" xxl="3">
                                       <div style="font-size: small; text-align: end">
                                          <b>@Convert.ToDecimal(t.totalTicketFee).ToString("C")</b>
                                       </div>
                                    </MudItem>
                                    <br/>
                                 }
                              </MudGrid>

                              <MudDivider DividerType="DividerType.FullWidth" Class="my-6"/>
                           </MudItem>
                        </MudGrid>

                        <br/>

                        <div>
                           <MudButton Variant="Variant.Filled" OnClick="@(async () => await ActionAdmitUser(_userAttendance.paginatedResults.FirstOrDefault()._id))" FullWidth="false" Style="background-color:#56375C; height: 50px; width: 150px" Color="Color.Secondary">
                              @if (_getTicketProcessing)
                              {
                                 <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                 <MudText Class="ms-2">Processing</MudText>
                              }
                              else
                              {
                                 <MudText><b>Admit</b></MudText>
                              }
                           </MudButton>

                        </div>
                     }
                     else
                     {
                        <div>

                           <div style="text-align:center;">
                              <MudImage Src="images/backgrounds/no-data.png" Alt="No data image" Elevation="0" Height="50" Class="rounded-lg"/>
                              <br/>
                              <MudText Typo="Typo.body2"> <b>No user found </b></MudText>
                              <MudText Typo="Typo.caption"> This user was not found for this event.</MudText>
                           </div>
                        </div>
                     }
                  

               </div>
               
               
               
               
            </MudPaper>
            
         </MudPaper>
      </center>
   </MudContainer>

   


</MudContainer>




@code {
   [Parameter] public string? code { get; set; }
   [Parameter] public string? eventId { get; set; }
   [Inject] IAttendanceService _attendanceService { get; set; }
   [Inject] IEventService _eventService { get; set; }
   [Inject] ISnackbar? _snackbar { get; set; }
   [Inject] NavigationManager? _navigate { get; set; }
   [Inject] IJSRuntime? js { get; set; }
   private MudMessageBox admituserMessageBox { get; set; }

   private bool _admitProcessing { get; set; }
   private bool _getTicketProcessing { get; set; }
   private bool _isTicketFound { get; set; }
   private bool _isAdmitted { get; set; } = false;
   
   private string ticketCode { get; set; }
   
   GetEventDetailsDto _events = new();
   GetAttendanceDto _userAttendance = new();


   protected async override void OnInitialized()
   {
      _admitProcessing = true;
      if (string.IsNullOrEmpty(eventId) || string.IsNullOrEmpty(code))
      {
         _snackbar.Add(GeneralMessages.WrongQrCodePassed, Severity.Error);
      }
      else
      {
         var res = await _eventService.GetEventDetails(eventId);
         if (res.result.code == ResponseCodes.ResponseCodeOk)
         {
            _events = res.result.data;
         }
         else
         {
            _snackbar.Add(res.result.message, Severity.Error);
         }
      }
      _admitProcessing = false;
      StateHasChanged();
   }



   private async Task ActionGetTicket(string ticketCode)
   {
      _getTicketProcessing = true;
      if (string.IsNullOrEmpty(ticketCode))
      {
         _snackbar.Add(GeneralMessages.EnterTicketCode, Severity.Error);
      }
      else if (string.IsNullOrEmpty(eventId) || string.IsNullOrEmpty(code))
      {
         _snackbar.Add(GeneralMessages.WrongQrCodePassed, Severity.Error);
      }
      else
      {
         var admit = await _attendanceService.GetAttendanceByUserCode(eventId, ticketCode);
         if (admit.result.code == ResponseCodes.ResponseCodeOk)
         {
            _userAttendance = admit.result.data;
            _isTicketFound = true;
         }
         else
         {
            _snackbar.Add(admit.result.message, Severity.Error);
         }
      }
      _getTicketProcessing = false;
      StateHasChanged();
   }
   
   
   private async Task ActionAdmitUser(string attendanceId)
   {
      bool? result = await admituserMessageBox.ShowAsync();
      if (result == true)
      {
         var res = await _attendanceService.AdmitAttendees(attendanceId);
         if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk && res.result.success == true)
         {
            _snackbar.Add(res.result.message, Severity.Success);
            _isAdmitted = true;
            //ActionClearTicketCode();
         }
         else
         {
            _snackbar.Add(res.result.message, Severity.Error);
         }
      }
      StateHasChanged();
   }

   private void ActionClearTicketCode()
   {
      ticketCode = string.Empty;
      _userAttendance = new GetAttendanceDto();
      _isTicketFound = false;
      StateHasChanged();
   }



}