@page "/accounts/login"

<PageTitle>Iv's - Login</PageTitle>

<style>

    * {
        box-sizing: border-box;
    }

    body, html {
        height: 100%;
        margin: 0;
    }

    .fade-in {
        opacity: 1;
        transition: opacity 0.5s ease-in;
    }

    .fade-out {
        opacity: 0;
        transition: opacity 0.5s ease-out;
    }

</style>

<MudContainer>

    <div class="login-container">

            <div class="row">
                <div class="column right" style="">

                    <div style="text-align:left">

                        <div id="login-title">Welcome Back! </div>
                        <br />
                        <div id="login-sub-title">Login to continue.</div>

                        <br /><br />

                        <EditForm Model="@model" OnValidSubmit="ActionLogin">
                            <DataAnnotationsValidator />
                            <MudTextField InputType="InputType.Email" Label="Email" Margin="Margin.Dense" HelperText="Enter your email" @bind-Value="model.email" For="@(() => model.email)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />
                       
                                <MudTextField InputType="@PasswordInput" Margin="Margin.Dense" Label="Password" HelperText="Enter your password" @bind-Value="model.password" For="@(() => model.password)" Variant="Variant.Outlined" HelperTextOnFocus="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtoShowPasswordClick" AdornmentAriaLabel="Show Password" />
                            <MudSpacer></MudSpacer>
                            <div id="forgot-password-div">
                            <a href="/accounts/send-forgot-password-token">Forgot password</a>
                        </div>

                        <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Disabled="@_processing" Style="height:50px; background:#56375C" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText><b>Login</b></MudText>
                                }
                            </MudButton>
                        </EditForm>

                        <br />

                    <div id="login-sinup-div">
                        Already have an account <a href="/accounts/signup">Sign up</a>
                       </div>

                    </div>
                </div>

            <div class="column left" id="transparent-image" style="">
                <div id="login-middle-title"> @displayText </div>
            </div>
        </div>
    </div>
    
    
</MudContainer>

@code{

    [Inject] IAccountService? _accountService { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    [Inject] ISessionStorageService _sessionStorageService { get; set; }
    [Inject] ILocalStorageService _localStorageService { get; set; }
    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }

    [Inject] NavigationManager? _navigate { get; set; }
    [SupplyParameterFromForm] public LoginVM? model { get; set; }

    bool isShow;
    private bool _processing = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    
    
    private System.Timers.Timer _timer;
    private string displayText = "Welcome Back!";
    private int counter = 0;
    private string fadeClass = "fade-in";
    private string[] messages = ["Hello...", "So glad to see you here!", "Kindly sign in to your account.", "You can also sign up!"];

    protected async override void OnInitialized()
    {
        model = new LoginVM();
        var checkSession = await _localStorageService.GetItemAsync<string>(Tokens.TokenName);
        if (!string.IsNullOrEmpty(checkSession))
        {
            _navigate.NavigateTo("/");
        }
        
        _timer = new System.Timers.Timer(5000); // Change text every 2 seconds
        _timer.Elapsed += UpdateText;
        _timer.AutoReset = true;
        _timer.Start();
        
    }
    
    private async void UpdateText(object sender, System.Timers.ElapsedEventArgs e)
    {
        fadeClass = "fade-out";  // Start fade-out effect
        await InvokeAsync(StateHasChanged);
        
        await Task.Delay(1000); // Wait for fade-out animation

        displayText = messages[counter % messages.Length];
        counter++;

        fadeClass = "fade-in";  // Start fade-in effect
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private async Task ActionLogin()
    {
        _processing = true;
        var res = await _accountService.Login(model);
        if ((res.result.code == ResponseCodes.ResponseCodeOk))
        {
            //var userid = res.result.data._id;
            await _localStorageService.SetItemAsync(Tokens.TokenName, res.result.token);
            await _localStorageService.SetItemAsync(Tokens.RefreshTokenName, res.result.refreshToken);
            await _authStateProvider.GetAuthenticationStateAsync();
            _navigate.NavigateTo("/events/dashboard", true);
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }
        _processing = false;
        StateHasChanged();
    }


    void ButtoShowPasswordClick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}