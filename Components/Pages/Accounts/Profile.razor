@page "/user/profile"

@{
    CultureInfo nigeriaCulture = new CultureInfo("en-NG");
    Thread.CurrentThread.CurrentCulture = nigeriaCulture;
    Thread.CurrentThread.CurrentUICulture = nigeriaCulture;
}

<PageTitle>Iv's - Account</PageTitle>

<br />


<AuthorizeView Roles="User,Admin">

    <NotAuthorized>
        No Access
    </NotAuthorized>

    <Authorized Context="cntx">

        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

            <MudPaper Elevation="0">
                <MudToolBar>
                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
                </MudToolBar>
            </MudPaper>

            <br />

            <MudGrid Spacing="6">

                <MudItem xs="12" sm="12" md="3" lg="3" xl="3" xxl="3">
                    <MudPaper Elevation="0" Class="mud-width-full py-10 pa-5" Style="text-align:center;">
                       
                        @if (_processing)
                        {
                            <MudSkeleton SkeletonType="SkeletonType.Circle" Width="100px" Height="100px" />
                        }
                        else
                        {
                            <MudAvatar Style="height:80px; width:80px; font-size:2rem; background-color:#55385c; color:white">@initials</MudAvatar>
                            <br /><br />

                            <MudText Typo="Typo.h5" Style="font-family:'Akaya Telivigala'; color:#55385c"> <b>@fullname</b> </MudText>

                            <br />
                            <MudDivider></MudDivider>
                            <br />

                            if(userDetails.Count > 0)
                            {
                                <div>Email : <b>@userDetails.FirstOrDefault().email</b></div>
                               
                            }


                        }

                    </MudPaper>
                </MudItem>


                <MudItem xs="12" sm="12" md="9" lg="9" xl="9" xxl="9">
                    <MudTabs Outlined="false" Position="Position.Top" SliderColor="Color.Secondary" Rounded="true" Border="true"  ApplyEffectsToContainer="true" Class="mt-8" PanelClass="">

                        <MudTabPanel Text="Settlement Account" >

                            <br /><br />

                            <MudText Typo="Typo.h6">Settlement Account</MudText>

                            <br /><br />


                            <MudGrid></MudGrid>

                            @if (_processing)
                            {
                                <MudSkeleton Height="42px" Width="200px" />
                                <MudSkeleton Height="42px" Width="500px" />
                                <MudSkeleton Height="42px" Width="800px" />
                            }
                            else
                            {
                               <MudItem xs="12" sm="12" md="12" lg="6" xl="6" xxl="6" >

                                    @if (!userDetails.FirstOrDefault().settlementAccounts.Any())
                                    {
                                        <MudText Typo="Typo.subtitle2"> You haven't created a settlement account yet. Add settlement account. </MudText>

                                        <br />
                                    }
                                    else
                                    {
                                    <MudSimpleTable Elevation="0" Dense="false" Hover="true" Bordered="false" Striped="false" Style="overflow-x: auto;">
                                        <thead>
                                            <tr>
                                                <th>Bank Name</th>
                                                <th>Account Name</th>
                                                <th>Account Number</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var row in userDetails.FirstOrDefault().settlementAccounts)
                                            {
                                                <tr>
                                                    <td>@row.bankName</td>
                                                    <td>@row.accountName</td>
                                                    <td>@row.accountNumber</td>
                                                    <td><MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" Color="Color.Error" Title="Locked" /></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </MudSimpleTable>
                                    }

                               </MudItem>
                            }


                        </MudTabPanel>

                        <MudTabPanel Text="Privacy">
                            <MudText>Content Two</MudText>
                        </MudTabPanel>

                        <MudTabPanel Text="Item Three">
                            <MudText>Content Three</MudText>
                        </MudTabPanel>

                    </MudTabs>
                </MudItem>



            </MudGrid>




        </MudContainer>
       

    </Authorized>
</AuthorizeView>




@code {

    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IAccountService _accountService { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }

    AuthUser authUser = new AuthUser();
    List<UserDetailsDto> userDetails = new List<UserDetailsDto>();

    private bool _processing { get; set; } = false;
    private string? initials {get;set;}
    private string? fullname {get;set;} 

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Dashboard", href: "/events/dashboard"),
        new BreadcrumbItem("Profile", href: null, true)
    };


    protected async override void OnInitialized()
    {
        _processing = true;
        var state = await _authStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            initials = auth.NameInitials;
            fullname = auth.SentenceCaseFullName;

            var res = await _accountService.GetUserById(auth.Id);
            if (res.result.code == ResponseCodes.ResponseCodeOk)
            {
                userDetails = (List<UserDetailsDto>)res.result.data;
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
        _processing = false;
        StateHasChanged();
    }
}
