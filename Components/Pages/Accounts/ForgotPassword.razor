@page "/accounts/forgot-password/{id}"

<PageTitle>Iv's - Forgot Password</PageTitle>


<MudContainer>

    <div style="text-align: center;" >
        <MudPaper Elevation="0" Outlined="false" MaxWidth="500px" Square="false" Class="ma-2 pa-10">

            <div style="text-align:left">

                <div id="reg-title">Reset your password</div>
                <br/>
                <div id="reg-sub-title">Enter the token sent to you, and enter your new password.</div>

                <br/>

                <EditForm Model="@model" OnValidSubmit="ActionForgotPassword">
                    <DataAnnotationsValidator/>

                    <MudTextField Label="Token" HelperText="Enter reset token sent to your email" @bind-Value="model.token" For="@(() => model.token)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                    <MudTextField InputType="@PasswordInput" Label="Password" HelperText="Enter your password" @bind-Value="model.newPassword" For="@(() => model.newPassword)" Variant="Variant.Outlined" HelperTextOnFocus="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtoShowPasswordClick" AdornmentAriaLabel="Show Password" />

                    <MudTextField InputType="@PasswordInput" Label="Confirm Password" HelperText="Confirm your password" @bind-Value="model.ConfirmNewPassword" For="@(() => model.ConfirmNewPassword)" Variant="Variant.Outlined" HelperTextOnFocus="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtoShowPasswordClick" AdornmentAriaLabel="Show Password" />

                    <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Disabled="@_processing" Style="height:50px; background:#e18501f7" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText><b>Reset Passeord</b></MudText>
                        }
                    </MudButton>
                </EditForm>

                <br/><br/>

                <div id="login-sinup-div">
                    Token expired ? click <a href="/accounts/send-forgot-password-token"><b>Here</b></a> to get a new token
                </div>
            </div>
        </MudPaper>
    </div>

</MudContainer>




@code {

    [Parameter] public string? id { get; set; }
    [Inject] ISnackbar _snackbar { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] IAccountService _accountrService { get; set; }
    [SupplyParameterFromForm] public ForgotPasswordVM? model { get; set; }

    bool isShow;
    private bool _processing = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;


    void ButtoShowPasswordClick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    protected async override void OnInitialized()
    {
        model = new ForgotPasswordVM();
    }


    private async Task ActionForgotPassword()
    {
        _processing = true;
        if (string.IsNullOrEmpty(id))
            _snackbar.Add("Invalid Id passed", Severity.Error);

        var res = await _accountrService.ResetPassword(id, model);
        if (res.result != null && (res.result.code == ResponseCodes.ResponseCodeOk))
        {
            _snackbar.Add(res.result.message, Severity.Success);
            _navigate.NavigateTo($"/accounts/login/", true);
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }
        StateHasChanged();
        _processing = false;
    }
}
