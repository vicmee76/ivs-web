@page "/accounts/send-forgot-password-token"

<PageTitle>Iv's - Send Forgot Password Token</PageTitle>


<MudContainer>
    <br /><br />
    <center>
        <MudPaper Elevation="0" Outlined="false" MaxWidth="500px" Square="false" Class="ma-2 pa-10">

            <div style="text-align:left">

                <div id="reg-title">Get a new password</div>
                <br />
                <div id="reg-sub-title">Enter your registered email and we will send you a code.</div>

                <br />

                <EditForm Model="@model" OnValidSubmit="ActionSendForgotPassword">
                    <DataAnnotationsValidator />

                    <MudTextField Label="Email" InputType="InputType.Email" HelperText="Enter your email" @bind-Value="model.email" For="@(() => model.email)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                    <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Disabled="@_processing" Style="height:50px; background:#e18501f7" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText><b>Send Code</b></MudText>
                        }
                    </MudButton>
                </EditForm>

                <br />

                <div id="login-sinup-div">
                    Click <a href="/accounts/login"><b>Here</b></a> to go back to login page
                </div>
            </div>
        </MudPaper>
    </center>

</MudContainer>

@code {

    [Inject] ISnackbar _snackbar { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] IAccountService _accountrService { get; set; }

    [SupplyParameterFromForm] public SendForgotPasswordVM? model { get; set; }
    private bool _processing = false;

    protected async override void OnInitialized()
    {
        model = new SendForgotPasswordVM();
    }

    private async Task ActionSendForgotPassword()
    {
        _processing = true;
        var res = await _accountrService.SendForgotPasswordToken(model.email);
        if ((res.result.code == ResponseCodes.ResponseCodeOk))
        {
            _snackbar.Add(res.result.message, Severity.Success);
            _navigate.NavigateTo($"/accounts/forgot-password/{res.result.data}");
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }
        StateHasChanged();
        _processing = false;
    }
}
