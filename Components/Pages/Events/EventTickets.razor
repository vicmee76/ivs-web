@page "/events/create-event-tickets/{id}"

<PageTitle>Iv's - Create Event Tickets</PageTitle>

<br />

<AuthorizeView>
    <NotAuthorized>
        No Access
    </NotAuthorized>

    <Authorized Context="cntx">

        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

            <MudPaper Elevation="0">
                <MudToolBar>

                    <MudText><b style="color:#56375C">Create Event Tickets</b></MudText>

                    <MudSpacer />
                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
                </MudToolBar>
            </MudPaper>

            <br />

            <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">
                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Information</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Photo</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Time</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Primary" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Info" NoIcon="true"><b>Tickets</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>
            </MudTimeline>

        </MudContainer>

    </Authorized>
</AuthorizeView>


@code {

    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    [Parameter] public string? id { get; set; }

    AuthUser authUser = new AuthUser();
    private string userId { get; set; }
    private string eventName { get; set; }
    private bool _processing = false;

     private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Dashboard", href: "/events/dashboard"),
        new BreadcrumbItem("Create Tickets", href: null, disabled: true)
    };


    protected async override void OnInitialized()
    {
        var state = await _authStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            userId = auth.Id;

            var res = await _eventService.GetEventMetaData(id);
            if (res.result.code == ResponseCodes.ResponseCode_Ok)
            {
                eventName = res.result.data.eventName;
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
        StateHasChanged();

    }
}
