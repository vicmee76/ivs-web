@page "/events/create-event-tickets/{id}"

<PageTitle>Iv's - Create Event Tickets</PageTitle>

<br />

<AuthorizeView>
    <NotAuthorized>
        No Access
    </NotAuthorized>

    <Authorized Context="cntx">

        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

            <MudPaper Elevation="0">
                <MudToolBar>

                    <MudText><b style="color:#56375C">Create Event Tickets</b></MudText>

                    <MudSpacer />
                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
                </MudToolBar>
            </MudPaper>

            <br />

            <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">
                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Information</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Photo</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Time</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Primary" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Info" NoIcon="true"><b>Tickets</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>
            </MudTimeline>

        </MudContainer>

        <br />

        <MudContainer Fixed="false" MaxWidth="MaxWidth.Large">

            <MudCard Elevation="0">
                <MudCardHeader>
                    <CardHeaderContent>
                    </CardHeaderContent>
                    <CardHeaderActions>

                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>

                    <EditForm Model="@model" OnValidSubmit="ActionCreateEventTicket">

                        <MudGrid>
                            <MudItem xs="12" sm="12" md="8" lg="12">
                                <DataAnnotationsValidator />

                                <MudText><b>Select your kind of ticket</b></MudText>
                                <br />

                                <MudRadioGroup @bind-Value="@model.eventOption" For="@(() => model.eventOption)">

                                    <MudGrid Style="text-align:center">

                                        <MudItem xs="6" sm="6" md="6" lg="6">
                                            <div id="public-event-div">
                                                <MudRadio Value="@("Single")" Color="Color.Primary"><b>@("Single Ticket")</b></MudRadio>
                                            </div>
                                        </MudItem>

                                        <MudItem xs="6" sm="6" md="6" lg="6">
                                            <div id="private-event-div">
                                                <MudRadio Value="@("Group")" Color="Color.Primary"><b>@("Group Ticket")</b></MudRadio>
                                            </div>
                                        </MudItem>
                                    </MudGrid>

                                </MudRadioGroup>

                                <br />

                                <MudTextField Label="Ticket Name*" HelperText="Enter ticket name" @bind-Value="model.eventName" For="@(() => model.eventName)" Margin="Margin.None" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                <MudTextField T="string" Label="Ticket Description*" @bind-Value="model.eventDescription" For="@(() => model.eventDescription)" HelperText="Enter ticket description" HelperTextOnFocus="true" Clearable="true" Variant="Variant.Outlined" Placeholder="Enter description here" Lines="5" />


                                <MudTextField Label="Event Address*" HelperText="Enter event address" @bind-Value="model.eventAddress" For="@(() => model.eventAddress)" Margin="Margin.None" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                <MudTextField Label="Event Google pin link" HelperText="Search for the event address on Google map, copy the link and paste it here" @bind-Value="model.adressPin" For="@(() => model.adressPin)" Margin="Margin.None" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                <MudSelect T="string" Label="Event State*" HelperText="Select state" Variant="Variant.Outlined" @bind-Value="model.eventState" For="@(() => model.eventState)" HelperTextOnFocus="true" Clearable="true">
                                    @if (allState != null)
                                    {
                                        foreach (var com in allState)
                                        {
                                            <MudSelectItem Value="@(com)">@(com)</MudSelectItem>
                                        }
                                    }
                                </MudSelect>

                                <br />

                                <MudText><b>Select the option *</b></MudText>
                                <br>

                                @if (!_getEventprocessing)
                                {
                                    <MudSkeleton Animation="Animation.Wave" Width="40%" />
                                    <MudSkeleton Animation="Animation.Wave" Width="60%" />
                                }
                                else
                                {
                                    <MudRadioGroup @bind-Value="@model.paymentOption" For="@(() => model.paymentOption)">
                                        @if (_paymentOptions != null)
                                        {
                                            <MudGrid Style="text-align:center">
                                                @foreach (var com in _paymentOptions)
                                                {
                                                    <MudItem xs="6" sm="6" md="6" lg="6">
                                                        <div id="public-event-div">
                                                            <MudRadio Value="@(com._id.ToString())" Color="Color.Primary"><b>@(com.name)</b></MudRadio>
                                                        </div>
                                                    </MudItem>
                                                }
                                            </MudGrid>
                                        }
                                    </MudRadioGroup>
                                }

                                <br /><br />

                                <MudText><b>Select the event category *</b></MudText>
                                <br />
                                @if (!_getEventprocessing)
                                {
                                    <MudSkeleton Animation="Animation.Wave" Width="40%" />
                                    <MudSkeleton Animation="Animation.Wave" Width="60%" />
                                }
                                else
                                {
                                    <MudRadioGroup @bind-Value="@model.eventTypeId" For="@(() => model.eventTypeId)">
                                        @if (_eventTypes != null)
                                        {
                                            <MudGrid>
                                                @foreach (var com in _eventTypes)
                                                {
                                                    <MudItem xs="6" sm="6" md="6" lg="3">
                                                        <div id="eventTypesDiv">
                                                            <MudRadio Value="@(com._id.ToString())" Color="Color.Primary"><small><b>@(com.name)</b></small></MudRadio>
                                                        </div>
                                                    </MudItem>
                                                }
                                            </MudGrid>
                                        }
                                    </MudRadioGroup>
                                }

                                <br /><br />


                                <MudTextField Label="Web link" HelperText="Enter you social web link here" @bind-Value="model.webLink" For="@(() => model.webLink)" Margin="Margin.Dense" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                <MudTextField Label="Facbook link" HelperText="Enter facebook event link if you have any" @bind-Value="model.facebookLink" For="@(() => model.facebookLink)" Margin="Margin.Dense" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                <MudTextField Label="Instagram Link" HelperText="Enter instagram event link if you have any" @bind-Value="model.instagramLink" For="@(() => model.instagramLink)" Margin="Margin.Dense" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                <MudTextField Label="Twitter link" HelperText="Enter twitter event link if you have any" @bind-Value="model.twitterLink" For="@(() => model.twitterLink)" Margin="Margin.Dense" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />


                            </MudItem>

                            <br>

                        </MudGrid>

                        <MudButton ButtonType="ButtonType.Submit" FullWidth="false" Disabled="@_processing" Style="height:50px; background-color:#56375C; width:200px" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText><b>Save & Continue</b></MudText>
                            }
                        </MudButton>

                        <br /><br /><br />

                    </EditForm>
                </MudCardContent>
            </MudCard>

        </MudContainer>
        

    </Authorized>
</AuthorizeView>


@code {

    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    [Parameter] public string? id { get; set; }

    AuthUser authUser = new AuthUser();
    private string userId { get; set; }
    private string eventName { get; set; }
    private bool _processing = false;

     private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Dashboard", href: "/events/dashboard"),
        new BreadcrumbItem("Create Tickets", href: null, disabled: true)
    };


    protected async override void OnInitialized()
    {
        var state = await _authStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            userId = auth.Id;

            var res = await _eventService.GetEventMetaData(id);
            if (res.result.code == ResponseCodes.ResponseCode_Ok)
            {
                eventName = res.result.data.eventName;
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
        StateHasChanged();

    }
}
