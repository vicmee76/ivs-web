@page "/events/create-event-tickets/{id}"


<PageTitle>Iv's - Create Event Tickets</PageTitle>

<br />

<AuthorizeView>
    <NotAuthorized>
        No Access
    </NotAuthorized>

    <Authorized Context="cntx">

        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

            <MudPaper Elevation="0">
                <MudToolBar>

                    <MudText><b style="color:#56375C">Create Event Tickets</b></MudText>

                    <MudSpacer />
                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
                </MudToolBar>
            </MudPaper>

            <br />

            <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">
                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Information</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Photo</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Time</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Primary" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Info" NoIcon="true"><b>Tickets</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>
            </MudTimeline>

        </MudContainer>



        <MudContainer Fixed="false" MaxWidth="MaxWidth.Medium">

            <MudCard Elevation="0">
                <MudCardHeader>
                    <CardHeaderContent>
                    </CardHeaderContent>
                    <CardHeaderActions>

                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>

                    <EditForm Model="@model" OnValidSubmit="ActionCreateEventTicket">

                        <MudGrid>
                            <MudItem xs="12" sm="12" md="8" lg="12">
                                <DataAnnotationsValidator />

                                <MudText><b>Select your kind of ticket</b></MudText>
                                <br />

                                <MudRadioGroup @bind-Value="@model.ticketKind"  For="@(() => model.ticketKind)">

                                    <MudGrid Style="text-align:center">

                                        <MudItem xs="6" sm="6" md="6" lg="6">
                                            <div id="ticket-event-div">
                                                <MudRadio Value="@("Single")" @onchange="@(async () => await ActionTicketKind(true))" Color="Color.Primary"><b>@("Single Ticket")</b></MudRadio>
                                            </div>
                                        </MudItem>

                                        <MudItem xs="6" sm="6" md="6" lg="6">
                                            <div id="ticket-event-div">
                                                <MudRadio Value="@("Group")" @onchange="@(async () => await ActionTicketKind(false))" Color="Color.Primary"><b>@("Group Ticket")</b></MudRadio>
                                            </div>
                                        </MudItem>
                                    </MudGrid>

                                </MudRadioGroup>

                                <br />

                                <MudTextField Label="Ticket Name*" HelperText="Enter ticket name" @bind-Value="model.ticketName" For="@(() => model.ticketName)" Margin="Margin.None" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                    <br />

                                <MudTextField T="string" Label="Ticket Description*" @bind-Value="model.ticketDescription" For="@(() => model.ticketDescription)" HelperText="Enter ticket description" HelperTextOnFocus="true" Clearable="true" Variant="Variant.Outlined" Placeholder="Enter description here" Lines="5" />


                                <MudText><b>Ticket payment kind *</b></MudText>
                                <br>

                                @if (!_getEventprocessing)
                                {
                                    <MudSkeleton Animation="Animation.Wave" Width="40%" />
                                    <MudSkeleton Animation="Animation.Wave" Width="60%" />
                                }
                                else
                                {
                                    <MudRadioGroup @bind-Value="@model.paymentOptionId" For="@(() => model.paymentOptionId)">
                                        @if (_paymentOptions != null)
                                        {
                                            <MudGrid Style="text-align:center">
                                                @foreach (var com in _paymentOptions)
                                                {
                                                    <MudItem xs="6" sm="6" md="6" lg="6">
                                                        <div id="ticket-event-div">
                                                            <MudRadio Value="@(com._id.ToString())" @onchange="@(async () => await ActionPaymentKind(com.name))" Color="Color.Primary"><b>@(com.name)</b></MudRadio>
                                                        </div>
                                                    </MudItem>
                                                }
                                            </MudGrid>
                                        }
                                    </MudRadioGroup>
                                }

                                <br /><br />

                                <MudNumericField HideSpinButtons="true" HelperText="Enter ticket in stock" @bind-Value="model.ticketAmount" For="@(() => model.ticketAmount)" Disabled="@_isFreeTicket" Label="Ticket amount" HelperTextOnFocus="true" Clearable="true" Variant="Variant.Outlined" Step=".2M" />

                                    <br />


                                <MudNumericField HelperText="Select the size for groups" @bind-Value="model.groupSize" Disabled="@_isGroupTicket" For="@(() => model.groupSize)" Label="Select the size for groups" Variant="Variant.Outlined" Min="1" Max="20" HelperTextOnFocus="true" Clearable="true" />

                                    <br />

                                <MudGrid>

                                    <MudItem xs="12" sm="12" md="12" lg="6">
                                        <MudSelect T="string" Label="Ticket in stock" ValueChanged="ActionTicketStock" HelperText="Select tickets in stock" HelperTextOnFocus="true" Clearable="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                            <MudSelectItem Value="@("Limited")" />
                                            <MudSelectItem Value="@("UnLimited")" />
                                        </MudSelect>
                                    </MudItem>

                                    <MudItem xs="12" sm="12" md="12" lg="6">
                                        <MudNumericField @bind-Value="model.ticketInStock" Disabled="@_isLimited" HelperText="Enter ticket in stock" For="@(() => model.ticketInStock)" Label="Ticket in stock" Variant="Variant.Outlined" Min="1" Max="500" HelperTextOnFocus="true" Clearable="true" />
                                    </MudItem>

                                </MudGrid>

                                <br />


                               
                            </MudItem>

                            <br>

                        </MudGrid>

                        <MudButton ButtonType="ButtonType.Submit" FullWidth="false" Disabled="@_processing" Style="height:50px; background-color:#56375C; width:200px" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText><b>Save & Continue</b></MudText>
                            }
                        </MudButton>

                        <br /><br /><br />

                    </EditForm>
                </MudCardContent>
            </MudCard>

        </MudContainer>
        

    </Authorized>
</AuthorizeView>


@code {

    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IPaymentOptionService _paymentOptionService { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    [SupplyParameterFromForm] public CreateTicketVM? model { get; set; }
    [Parameter] public string? id { get; set; }


    IEnumerable<GetPaymentOptionsDto> _paymentOptions = new List<GetPaymentOptionsDto>();
    AuthUser authUser = new AuthUser();
    private string userId { get; set; }
    private string eventName { get; set; }
    private bool _processing = false;
    private bool _getEventprocessing { get; set; } = false;

    private bool _isGroupTicket { get; set; }
    private bool _isFreeTicket { get; set; }
    private bool _isLimited { get; set; }

    private string selectTickStock { get; set; }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Dashboard", href: "/events/dashboard"),
        new BreadcrumbItem("Create Tickets", href: null, disabled: true)
    };


    protected async override void OnInitialized()
    {
        _getEventprocessing = false;

        model = new CreateTicketVM();

        var state = await _authStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            userId = auth.Id;

            var res = await _eventService.GetEventMetaData(id);
            if (res.result.code == ResponseCodes.ResponseCode_Ok)
            {
                eventName = res.result.data.eventName;
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }

            var res2 = await _paymentOptionService.GetAllPaymentOptions();
            _paymentOptions = res2.result.data ?? new List<GetPaymentOptionsDto>();
        }
        _getEventprocessing = true;
        StateHasChanged();
    }


    private async Task ActionCreateEventTicket()
    {

    }

    private async Task ActionTicketKind(bool value)
    {
        _isGroupTicket = value;
        if (value)
            model.groupSize = 0;

        StateHasChanged();
    }


    private async Task ActionPaymentKind(string value)
    {
        if(value.ToLower() == "free")
        {
            _isFreeTicket = true;
            model.ticketAmount = 0;
        }
        else
        {
            _isFreeTicket = false;
        }
        StateHasChanged();
    }


    private void ActionTicketStock(string value)
    {
        if(value.ToLower() == "limited")
        {
            _isLimited = false;
            model.ticketInStock = 0;
        }
        else
        {
            _isLimited = true;
            model.ticketInStock = int.MaxValue;
        }
        StateHasChanged();
    }

}
