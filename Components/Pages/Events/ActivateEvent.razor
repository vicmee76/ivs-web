@page "/events/activate-event/{id}"
 

<PageTitle>Iv's - Activate Event</PageTitle>

<br />

<AuthorizeView Roles="User,Admin">

    <NotAuthorized>
        No Access
    </NotAuthorized>

    <Authorized Context="cntx">

        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

            <MudMessageBox @ref="publishMessageBox" Title="Publish event" CancelText="Cancel" YesText="Publish" Style="padding:20px;">
                <MessageContent>
                    Are you sure you want to publish this event
                </MessageContent>
                <YesButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Warning">Publish</MudButton>
                </YesButton>
                <CancelButton>
                    <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default">Cancel</MudButton>
                </CancelButton>
            </MudMessageBox>


            <MudPaper Elevation="0">
                <MudToolBar>

                    @if (!_getEventprocessing)
                    {
                        <MudSkeleton Animation="Animation.Wave" Width="20%" />
                    }
                    else
                    {
                        <MudText><b style="color:#56375C">Preview event for -- <b>@eventName</b></b></MudText>
                    }
                    <MudSpacer />
                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
                </MudToolBar>
            </MudPaper>

            <br />

            @if (!_getEventprocessing)
            {
                <MudSkeleton Height="42px;" />
                <MudSkeleton Height="42px;" />
                <MudSkeleton Height="42px;" />
            }
            else
            {

                <MudPaper Elevation="0" Style="padding:20px">

                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12" lg="4" Style="padding:10px">

                            <MudText Typo="Typo.body1"><b>Banner</b></MudText>

                            <br />

                            <div>
                                <MudImage Fluid="true" Src="@_events.eventImagePath" Height="500" Width="500" Alt="Swedish Farm House" Class="rounded-lg" />
                            </div>

                        </MudItem>

                        <MudItem xs="12" sm="12" md="12" lg="8" Style="padding:10px">

                            <MudText Typo="Typo.body1"><b>Event Details</b></MudText>

                            <br />

                            <MudGrid>

                                <MudItem xs="12" sm="12" md="12" lg="9">

                                    <div>
                                        <MudText Typo="Typo.h6"><b>@_events.eventName</b></MudText>
                                        <br />
                                        <div>
                                            <MudChip Size="Size.Medium" Color="Color.Secondary"><b>@_events.eventOption.ToUpper()</b></MudChip>
                                            <MudChip Size="Size.Medium" Color="Color.Warning"><b>@_events.EventType.FirstOrDefault().name</b></MudChip>

                                            </div>
                                        </div>

                                        <br />

                                        <div style="line-height:30px; font-size:15px">
                                            <span>@_events.eventDescription</span>
                                    </div>

                                    <br /><br />

                                    <div>

                                        <MudText Typo="Typo.body1"><b>Address</b></MudText>

                                        <br />

                                        <div> @_events.eventAddress</div>
                                        <div> @_events.eventState</div>
                                        <br />

                                        @if (!string.IsNullOrEmpty(_events.adressPin))
                                        {
                                            <MudButton Href="@_events.adressPin"
                                                       Target="_blank"
                                                       Variant="Variant.Outlined"
                                                       EndIcon="@Icons.Material.Filled.LocationOn"
                                                       Color="Color.Secondary"
                                                       Style="text-transform:none">
                                                Google address pin link
                                            </MudButton>
                                            <br />
                                        }
                                    </div>

                                    <br />

                                    

                                    <div>

                                        <MudText Typo="Typo.body1"><b>Event Time</b></MudText>

                                        <br />

                                        @if (!_events.EventTime.Any())
                                        {
                                            <span>
                                                You haven't set a time for your event. Please click <MudLink Href="@timelink" Variant="Variant.Outlined" Color="Color.Secondary" Style="text-transform:none; cursor:pointer"><b>here</b></MudLink> to create a time
                                            </span>
                                        }
                                        else
                                        {
                                            <MudExpansionPanels DisableBorders="true" Elevation="0">

                                                @foreach (var t in _events.EventTime)
                                                {
                                                    <MudExpansionPanel Text="@Convert.ToDateTime(t.startDateAndTime).ToString("dddd, dd MMMM yyyy")">
                                                        <div style="padding:10px; border:1px dashed #f0baf9">
                                                            <MudText Typo="Typo.body2">Starts At : <b>@Convert.ToDateTime(t.startDateAndTime).ToString("dddd, dd MMMM yyyy, HH:mm tt")</b> </MudText>
                                                            <br />
                                                            <MudText Typo="Typo.body2">Ends At : <b>@Convert.ToDateTime(t.endDateAndTime).ToString("dddd, dd MMMM yyyy, HH:mm tt")</b> </MudText>
                                                        </div>
                                                    </MudExpansionPanel>
                                                   <br />
                                                }
                                            </MudExpansionPanels>
                                        }

                                    </div>

                                    <br />

                                    <div>

                                        <MudButton Variant="Variant.Filled" OnClick="@((e) => ViewQrCodeAction(_events.qrCodeLink))" EndIcon="@Icons.Material.Filled.QrCode" Color="Color.Warning" Style="text-transform:none">
                                            View QR Code
                                        </MudButton>

                                    </div>

                                    <br /><br />

                                    <div>
                                        <MudText Typo="Typo.body1"><b>Event Tickets</b></MudText>

                                        <br />

                                        @if (!_events.Tickets.Any())
                                        {
                                            <span>
                                                You dont have any tickets, please click <MudLink Href="@ticketlink" Variant="Variant.Outlined" Color="Color.Secondary" Style="text-transform:none; cursor:pointer"><b>here</b></MudLink> to create a ticket
                                            </span>
                                        }
                                        else
                                        {
                                            <MudExpansionPanels DisableBorders="true" Elevation="0">
                                                @foreach (var t in _events.Tickets)
                                                {
                                                    <MudExpansionPanel Text="@t.ticketName">
                                                        <div style="padding:10px; border:1px dashed #f9c7ba; line-height:30px;">
                                                            <div><b>Ticket Kind : </b><span>@t.ticketKind</span></div>
                                                            <div><b>Ticket Name : </b><span>@t.ticketName</span></div>
                                                            <div><b>Ticket Price : </b><span>@t.ticketAmount.numberDecimal.ToString("N0")</span></div>
                                                            <div><b>Ticket in stock : </b><span>@t.ticketInStock</span></div>
                                                            <div><b>Group Size : </b><span>@t.groupSize</span></div>
                                                            <div><b>Ticket start date : </b><span>@Convert.ToDateTime(t.ticketSalesStartDateAndTime).ToString("dddd, dd MMMM yyyy, HH:mm tt")</span></div>
                                                            <div><b>Ticket end date : </b><span>@Convert.ToDateTime(t.ticketSalesEndDateAndTime).ToString("dddd, dd MMMM yyyy, HH:mm tt")</span></div>
                                                        </div>
                                                    </MudExpansionPanel>
                                                    <br />
                                                }
                                            </MudExpansionPanels>
                                        }

                                    </div>

                                    <br /><br />

                                    <div>
                                        <MudText Typo="Typo.body1"><b>Social Links</b></MudText>

                                       <br />

                                       <div>
                                           
                                            @if (!string.IsNullOrWhiteSpace(_events.webLink))
                                            {
                                                <div>
                                                    Visit us on
                                                    <MudElement HtmlTag="a" Class="ms-1" Style="color:lightsalmon;font-weight:bold;" href="@_events.webLink" target="blank" rel="noopener noreferrer">
                                                       @_events.webLink
                                                    </MudElement>
                                                </div>
                                                <br />
                                            }

                                            @if (!string.IsNullOrWhiteSpace(_events.instagramLink))
                                            {
                                                <div>
                                                    Visit us on
                                                    <MudElement HtmlTag="a" Class="ms-1" Style="color:hotpink;font-weight:bold;" href="@_events.instagramLink" target="blank" rel="noopener noreferrer">
                                                        @_events.instagramLink
                                                    </MudElement>
                                                </div>
                                                <br />
                                            }

                                            @if (!string.IsNullOrWhiteSpace(_events.facebookLink))
                                            {
                                                <div>
                                                    Visit us on
                                                    <MudElement HtmlTag="a" Class="ms-1" Style="color:blue;font-weight:bold;" href="@_events.facebookLink" target="blank" rel="noopener noreferrer">
                                                        @_events.facebookLink
                                                    </MudElement>
                                                </div>
                                                <br />
                                            }

                                            @if (!string.IsNullOrWhiteSpace(_events.twitterLink))
                                            {
                                                <div>
                                                    Visit us on
                                                    <MudElement HtmlTag="a" Class="ms-1" Style="color:black;font-weight:bold;" href="@_events.twitterLink" target="blank" rel="noopener noreferrer">
                                                        @_events.twitterLink
                                                    </MudElement>
                                                </div>
                                                <br />
                                            }


                                       </div>

                                    </div>

                                </MudItem>

                               <MudItem xs="12" sm="12" md="12" lg="3">

                                   <div style="text-align : center">

                                        @if(_events.status == Helpers.Pending)
                                        {
                                            <MudButton Variant="Variant.Filled" Disabled="@_processing" id="btnDarkColor" OnClick="@((e) => PublishEventAction())" Size="Size.Large">
                                                @if (_processing)
                                                {
                                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                    <MudText Class="ms-2">Processing</MudText>
                                                }
                                                else
                                                {
                                                    <MudText><b>Publish Event</b></MudText>
                                                }
                                            </MudButton>
                                        }

                                   </div>

                               </MudItem>


                            </MudGrid>

                        </MudItem>
                    </MudGrid>

                </MudPaper>
            }



        </MudContainer>

        <br />

    </Authorized>
</AuthorizeView>

@code {

    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] IConfiguration _config { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    [Inject] IDialogService DialogService { get; set; }
    [Parameter] public string? id { get; set; }

    AuthUser authUser = new AuthUser();
    GetEventDetailsDto _events = new GetEventDetailsDto();
    private string userId { get; set; }
    private string eventName { get; set; }
    private string timelink { get; set; }
    private string ticketlink { get; set; }
    private bool _getEventprocessing { get; set; } = false;
    private bool _processing { get; set; } = false;

    private MudMessageBox publishMessageBox { get; set; }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Events", href: "/events/dashboard"),
        new BreadcrumbItem("Preview event", href: null, true)
    };


    protected async override void OnInitialized()
    {
        _getEventprocessing = false;
        timelink = $"/events/create-event-time/{id}";
        ticketlink = $"/events/create-event-tickets/{id}";
        var state = await _authStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            userId = auth.Id;

            var res = await _eventService.GetEventDetails(id);
            if (res.result.code == ResponseCodes.ResponseCodeOk)
            {
                _events = res.result.data;
                eventName = _events.eventName;
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
        _getEventprocessing = true;
        StateHasChanged();
    }


    private async Task ViewQrCodeAction(string qrCode)
    {
        DialogOptions opts = new DialogOptions()
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                ClassBackground = "my-custom-class"
            };

        var parameters = new DialogParameters<QrCodeDialog> { { x => x.qrCodeData, qrCode }};
        var dialog = await DialogService.ShowAsync<QrCodeDialog>("QR Code", parameters, opts);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            StateHasChanged();
        }
    }



    private async Task PublishEventAction()
    {
        _processing = true;

        bool? result = await publishMessageBox.Show();
        if (result == true)
        {
            var res = await _eventService.ActivateEvent(id);
            if (res.result.code == ResponseCodes.ResponseCodeOk)
            {
                _snackbar.Add(res.result.message, Severity.Success);
                _navigate.NavigateTo("/events/dashboard");
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }

        StateHasChanged();
        _processing = false;
    }
}
