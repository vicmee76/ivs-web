@page "/events/upload-banner/{id}"

<PageTitle>Iv's - Upload Event Banner</PageTitle>

<br />

<AuthorizeView Roles="User,Admin">

    <NotAuthorized>
        No Access
    </NotAuthorized>


    <Authorized Context="cntx">

        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

            <MudPaper Elevation="0">
                <MudToolBar>

                     @if (!_getEventprocessing)
                    {
                        <MudSkeleton Animation="Animation.Wave" Width="20%" />
                    }
                    else
                    {
                    <MudText><b style="color:#56375C">Upload Your Banner for -- <b>@eventName</b></b></MudText>
                    }
                    <MudSpacer />
                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>

                </MudToolBar>
            </MudPaper>

            <br />

            <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">
                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Information</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Primary" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Info" NoIcon="true"><b>Photo</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Time</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>

                <MudTimelineItem Color="Color.Default" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="Severity.Normal" NoIcon="true"><b>Tickets</b></MudAlert>
                    </ItemContent>
                </MudTimelineItem>
            </MudTimeline>


        </MudContainer>

        <br /><br />

          <MudContainer Fixed="false" MaxWidth="MaxWidth.Large">

              <MudGrid>

                <MudItem xs="12" sm="12" md="12" lg="5">

                    <MudStack Style="width:100%">
                        <MudFileUpload T="IBrowserFile"
                                       OnFilesChanged="OnInputFileChanged"
                                       Hidden="@false"
                                       Accept=".png, .jpg, .jpeg"
                                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                                       InputStyle="opacity:0"
                                       @ondragenter="@SetDragClass"
                                       @ondragleave="@ClearDragClass"
                                       @ondragend="@ClearDragClass">
                            <ButtonTemplate>

                                <MudPaper Height="100px" Outlined="true"Class="@_dragClass">
                                    <MudText Typo="Typo.h6">
                                        Drag and drop files here or click
                                    </MudText>
                                    @foreach (var file in _fileNames)
                                    {
                                        <MudChip Color="Color.Primary" Text="@file" />
                                    }
                                </MudPaper>

                                <MudToolBar DisableGutters="true" Class="relative d-flex justify-end gap-4 z-30">
                                    
                                    <MudButton HtmlTag="label" Color="Color.Primary" for="@context.Id" Icon="@Icons.Material.Filled.Image" Disabled="_processing" Variant="Variant.Outlined"> Browse </MudButton>
                                    
                                    <MudButton OnClick="@(async () => await Upload())" Style="background-color:#56375C; color:white" Disabled="@(!_fileNames.Any())" Variant="Variant.Filled">
                                        @if (_processing)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Processing</MudText>
                                        }
                                        else
                                        {
                                            <MudText> Upload & Continue</MudText>
                                        }
                                    </MudButton>

                                    <MudButton OnClick="@Clear" Color="Color.Error" Disabled="@(!_fileNames.Any())" Variant="Variant.Outlined"> Clear </MudButton>
                                    <MudButton OnClick="@Clear" Color="Color.Primary" Href="@skipUrl" Disabled="@_processing" Variant="Variant.Filled"> Skip </MudButton>
                                </MudToolBar>

                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudStack>

                </MudItem>


                <MudItem xs="12" sm="12" md="12" lg="7" Style="text-align:center">

                    <MudText Typo="Typo.h6">
                        Banner preview
                    </MudText>

                    <br />

                    <div>
                        @if (imageData != null)
                        {
                            <MudImage Fluid="true" Src="@imageData" Alt="BannerPreview" Class="rounded-lg img" Width="559" />
                        }
                    </div>

                </MudItem>

              </MudGrid>
           
          </MudContainer>

    </Authorized>

</AuthorizeView>

@code {

    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    [Parameter] public string? id { get; set; }

    AuthUser authUser = new AuthUser();
    private bool _getEventprocessing { get; set; } = false;
    private string userId { get; set; }
    private string imageData { get; set; }
    private string eventName { get; set; }
    private string skipUrl { get; set; } 
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private List<string> _fileNames = new();
    private UploadBodyVM model = new();
    private UploadFileVM fileModel = new();
    private IBrowserFile imageFile;

    private bool _processing = false;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Events", href: "/events/dashboard"),
        new BreadcrumbItem("Upload Banner", href: null, true)
    };

    protected async override void OnInitialized()
    {
        _getEventprocessing = false;
        var state = await _authStateProvider.GetAuthenticationStateAsync();
        skipUrl = $"/events/create-event-time/{id}";
        
        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            userId = auth.Id;

            var res = await _eventService.GetEventMetaData(id);
            if(res.result.code == ResponseCodes.ResponseCodeOk)
            {
                if (res?.result?.data.status == Helpers.Active)
                {
                    _navigate.NavigateTo("/events/dashboard");
                    _snackbar.Add("Event is already active", Severity.Info);
                }
                else
                {
                    eventName = res?.result?.data.eventName;
                    imageData = res.result.data.eventImagePath;
                }
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
        _getEventprocessing = true;
        StateHasChanged();

    }

    private async Task Clear()
    {
        _fileNames.Clear();
        imageData = string.Empty;
        ClearDragClass();
        await Task.Delay(100);
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            ClearDragClass();
            var files = e.GetMultipleFiles();
            _fileNames = new List<string>();
            imageData = string.Empty;
            foreach (var file in files)
            {
                var formart = file.ContentType;
                var buffer = new byte[file.Size];
                _fileNames.Add(file.Name);
                await file.OpenReadStream(file.Size).ReadExactlyAsync(buffer);
                imageData = $"data:{formart};base64,{Convert.ToBase64String(buffer)}";
                model.ivsEventId = id;
                imageFile = file;
                fileModel.fileData = buffer;
                fileModel.fileName = file.Name;
                fileModel.imageFileData = imageData;
            }
            StateHasChanged();
        }
        catch(Exception ex)
        {
            _snackbar.Add("Something went wrong, please try again later", Severity.Error);
        }
    }

    private async Task Upload()
    {
        _processing = true;
        if (imageFile != null)
        {
            var res = await _eventService.UploadEventBanner(model, fileModel);
            if (res.result != null && (res.result.code == ResponseCodes.ResponseCodeOk))
            {
                _snackbar.Add(res.result.message, Severity.Success);
                _navigate.NavigateTo($"/events/create-event-time/{res.result.data._id}");
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
        else
        {
            _snackbar.Add("Please select and image to upload", Severity.Error);
        }
        _processing = false;
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
