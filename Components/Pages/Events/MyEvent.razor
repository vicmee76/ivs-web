@page "/events/my-events"

<PageTitle>Iv's - My Events</PageTitle>


<AuthorizeView Roles="User,Admin">
   <NotAuthorized>
      No Access
   </NotAuthorized>
   <Authorized>

      <br /><br />
      <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">
         <MudMessageBox @ref="deleteEventMessageBox" Title="Delete event" CancelText="Cancel" YesText="Delete" Style="padding:20px;">
            <MessageContent>
               Are you sure you want to delete this event
            </MessageContent>
            <YesButton>
               <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary">Delete</MudButton>
            </YesButton>
            <CancelButton>
               <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default">Cancel</MudButton>
            </CancelButton>
         </MudMessageBox>

         <MudPaper Elevation="0">
            <MudToolBar>
               <MudSpacer/>
               <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
            </MudToolBar>
         </MudPaper>

         <MudCard Elevation="0" Style="padding:10px">
            
            <MudCardContent>

               <MudToggleIconButton @bind-Toggled="isGridView"
                                    Icon="@Icons.Material.Filled.List"
                                    Color="@Color.Dark"
                                    Size="Size.Large"
                                    ToggledIcon="@Icons.Material.Filled.GridView"
                                    ToggledColor="@Color.Dark"
                                    ToggledSize="Size.Large"
                                    title="@(isGridView ? "Showing grid view" : "Showing list view")" />

               <span>@(isGridView ? "Showing grid view" : "Showing list view")</span>

               <br/><br/>

               <MudDivider></MudDivider>

               <br/>

               @if (_processing)
               {
                  <MudSkeleton Height="42px;"/>
                  <MudSkeleton Height="42px;"/>
                  <MudSkeleton Height="42px;"/>
               }
               else
               {
                  @if (_eventsDto.Any())
                  {
                     if (isGridView)
                     {
                        <MudGrid Spacing="6">
                           @foreach (var item in _eventsDto)
                           {
                              var activateUrl = $"/events/activate-event/{item._id}";
                              var updateUrl = $"/events/update-event/{item._id}";
                              var eventName = item.eventName.Length > 23 ? item.eventName[..23] + " ..." : item.eventName;

                              <MudItem xs="12" sm="12" md="6" lg="3">
                                 <MudCard>
                                    <MudCardHeader>
                                       <CardHeaderAvatar>
                                          <MudAvatar Size="Size.Medium" Color="Color.Secondary">@item.eventName[0]</MudAvatar>
                                       </CardHeaderAvatar>
                                       <CardHeaderContent>
                                          <MudText Typo="Typo.body2"><b>@eventName</b></MudText>
                                          <MudText Style="font-size: small" Typo="Typo.body1">@item.eventOption event</MudText>
                                       </CardHeaderContent>
                                       <CardHeaderActions>
                                          <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Default">
                                             <MudMenuItem>View event</MudMenuItem>
                                             @if (item.status == Helpers.Pending)
                                             {
                                                <MudMenuItem Href="@updateUrl" >Edit event</MudMenuItem>
                                                <MudMenuItem OnClick="@(async (e) => await DeleteEventAction(item._id))"> Delete event</MudMenuItem>
                                             }
                                             else
                                             {

                                             }
                                          </MudMenu>
                                       </CardHeaderActions>
                                    </MudCardHeader>

                                    @if (string.IsNullOrEmpty(item.eventImagePath))
                                    {
                                       <MudCardMedia Image="images/backgrounds/abstract.jpg" Height="200"/>
                                    }
                                    else
                                    {
                                       <MudCardMedia Image="@item.eventImagePath" Height="200"/>
                                    }

                                    <MudCardContent>
                                       <MudText Typo="Typo.body2">@item.eventAddress</MudText>
                                    </MudCardContent>

                                    <MudCardActions>
                                       <MudIconButton Icon="@Icons.Material.Filled.Share" Size="Size.Medium" Title="Share" Color="Color.Warning"/>

                                       @if (item.status == Helpers.Pending)
                                       {
                                          <MudChip Variant="Variant.Text" Color="Color.Warning"><b>Not published</b></MudChip>
                                       }
                                       else
                                       {
                                          <MudChip Variant="Variant.Text" Color="Color.Success"><b>Published</b></MudChip>
                                       }

                                       <MudSpacer></MudSpacer>

                                       @if (item.status == Helpers.Pending)
                                       {
                                          <MudIconButton Href="@activateUrl" Icon="@Icons.Material.TwoTone.KeyboardDoubleArrowRight" Title="Publish event" Size="Size.Medium" Color="Color.Warning"/>
                                       }
                                       else
                                       {
                                          <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" Title="View event" Size="Size.Medium" Color="Color.Secondary"/>
                                       }

                                    </MudCardActions>
                                 </MudCard>
                              </MudItem>
                           }
                        </MudGrid>
                     }
                     else
                     {
                        <MudDataGrid T="GetEventByUserDto" Elevation="1" Bordered="true" Striped="true" Hover="true" MultiSelection="false" Items="@_eventsDto" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" Hideable="false">
                           <ToolBarContent>
                              <MudText Typo="Typo.h6" Color="Color.Secondary"><b>My Events</b></MudText>
                              <MudSpacer />
                              <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                           </ToolBarContent>
                           <Columns>
                              <TemplateColumn  Title="Actions" Sortable="false" Filterable="false">
                                 <CellTemplate Context="ctx">
                                    @{
                                       var updateUrl = $"/events/update-event/{ctx.Item._id}";
                                    }
                                    <MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Color="Color.Default">
                                       <MudMenuItem>View event</MudMenuItem>
                                       @if (ctx.Item.status == Helpers.Pending)
                                       {
                                          <MudMenuItem Href="@updateUrl">Edit event</MudMenuItem>
                                          <MudMenuItem OnClick="@(async (e) => await DeleteEventAction(ctx.Item._id))"> Delete event</MudMenuItem>
                                       }
                                       else
                                       {

                                       }
                                    </MudMenu>
                                 </CellTemplate>
                              </TemplateColumn>
                              <PropertyColumn Property="x => x.eventOption" Title="Privacy" Sortable="true" Filterable="true"/>
                              <PropertyColumn Property="x => x.eventName" Title="Event Name" Sortable="true" Filterable="true"/>
                              <PropertyColumn Property="x => x.eventAddress" Title="Event Address" Sortable="false" Filterable="true"/>
                              <TemplateColumn Title="Status" Sortable="true" Filterable="true">
                                 <CellTemplate Context="ctx">
                                    @if (ctx.Item.status == Helpers.Pending)
                                    {
                                       <MudChip Variant="Variant.Text" Color="Color.Warning"><b>Not published</b></MudChip>
                                    }
                                    else
                                    {
                                       <MudChip Variant="Variant.Text" Color="Color.Success"><b>Published</b></MudChip>
                                    }
                                 </CellTemplate>
                              </TemplateColumn>
                              <TemplateColumn Title="Created Date" Sortable="false" Filterable="true">
                                 <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.createdAt).ToString("F") </CellTemplate>
                              </TemplateColumn>
                              <TemplateColumn Title="Share" Sortable="false" Filterable="false">
                                 <CellTemplate Context="ctx">
                                    <MudIconButton Icon="@Icons.Material.Filled.Share" Size="Size.Small" Title="Click to copy" Color="Color.Warning"/>
                                 </CellTemplate>
                              </TemplateColumn>
                              <TemplateColumn Title="Published" Sortable="false" Filterable="false">
                                 <CellTemplate Context="ctx">
                                    @{
                                       var activateUrl = $"/events/activate-event/{ctx.Item._id}";
                                    }
                                    @if (ctx.Item.status == Helpers.Pending)
                                    {
                                       <MudIconButton Href="@activateUrl" Icon="@Icons.Material.TwoTone.KeyboardDoubleArrowRight" Title="Publish event" Size="Size.Medium" Color="Color.Default"/>
                                    }
                                    else
                                    {
                                       <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" Title="View event" Size="Size.Medium" Color="Color.Secondary"/>
                                    }
                                 </CellTemplate>
                              </TemplateColumn>
                           </Columns>
                           <PagerContent>
                              <MudDataGridPager T="GetEventByUserDto" />
                           </PagerContent>
                        </MudDataGrid>
                     }
                  }
                  else
                  {
                     <div style="text-align:center;">
                        <MudImage Src="images/backgrounds/no-data.png" Alt="No data image" Elevation="0" Height="130" Class="rounded-lg"/>
                        <br/>
                        <MudText Typo="Typo.h5"> <b>You haven't created an event yet!</b></MudText>
                        <br>
                        <MudText> Once you create an event you will be able to visualize and track them.</MudText>
                     </div>
                  }
               }

            </MudCardContent>
         </MudCard>

      </MudContainer>
   </Authorized>
</AuthorizeView>


@code {

   [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
   [Inject] IEventService _eventService { get; set; }
   [Inject] NavigationManager? _navigate { get; set; }
   [Inject] ISnackbar? _snackbar { get; set; }
   private MudMessageBox deleteEventMessageBox { get; set; }
   IEnumerable<GetEventByUserDto> _eventsDto = new List<GetEventByUserDto>();
   AuthUser authUser = new AuthUser();
   private string fullname { get; set; }
   private string userId { get; set; }
   private bool _processing { get; set; } = false;
   private bool isGridView { get; set; } = true;

   private string _searchString;
   private bool _sortNameByLength;

   private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
   {
      new BreadcrumbItem("Events", href: "#"),
      new BreadcrumbItem("My Events", href: null, disabled: true)
   };


   protected async override void OnInitialized()
   {
      _processing = true;
      var state = await _authStateProvider.GetAuthenticationStateAsync();

      if (!state.User.Identity.IsAuthenticated)
      {
         _navigate.NavigateTo("/accounts/login");
      }
      else
      {
         var auth = await authUser.GetAuthUserAsync(state);
         userId = auth.Id;
         fullname = auth.SentenceCaseFullName;
         await GetEvents();
      }
      _processing = false;
      StateHasChanged();
   }



   private Func<GetEventByUserDto, bool> _quickFilter => x =>
   {
      if (string.IsNullOrWhiteSpace(_searchString))
         return true;

      if (x.eventName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
         return true;

      if (x.status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
         return true;
      
      if ($"{x.eventName} {x.status} {x.eventOption}".Contains(_searchString))
         return true;

      return false;
   };


   private async Task GetEvents()
   {
      var res2 = await _eventService.GetEventByUser(userId);
      _eventsDto = res2.result.data ?? new List<GetEventByUserDto>();
   }

   private async Task DeleteEventAction(string id)
   {
      _processing = true;
      bool? result = await deleteEventMessageBox.Show();
      if (result == true)
      {
         var res = await _eventService.DeleteEvent(id);
         _snackbar.Add(res.result.message, res.result.code == ResponseCodes.ResponseCodeOk ? Severity.Success : Severity.Error);
         await GetEvents();
      }

      _processing = false;
      StateHasChanged();
   }


}