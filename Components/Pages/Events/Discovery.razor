@page "/events/discovery"

<PageTitle>Iv's - Discovery</PageTitle>

<MudContainer Fixed="true" MaxWidth="MaxWidth.Medium">


    <div id="discovery-title"> <span id="discovery-title-1">Discover</span> every <span id="discovery-title-2">moment</span></div>

   <MudGrid Spacing="6" Justify="Justify.Center">
     
   @if (_processing)
   {
      <MudItem xs="12" sm="12" md="12" lg="12">
         <MudSkeleton Height="42px;"/>
         <MudSkeleton Height="42px;"/>
         <MudSkeleton Height="42px;"/>
      </MudItem>
   }
   else
   {
      foreach (var e in _event)
      {
         string eventName = e.eventName.Length > 19 ? e.eventName[..21] + " ..." : e.eventName;
         string address = e.eventAddress.Length > 25 ? e.eventAddress[..25] + " ..." : e.eventAddress;
         
         <MudItem xs="12" sm="12" md="6" lg="3" xl="3" xxl="2">
            <MudCard>
               <MudCardMedia Image="@e.eventImageData" Height="200" />
               <MudCardContent>
                  <br/>
                  <div style="font-size: medium"><b>@eventName</b></div>
                  <br/>
                  <div style="line-height: 40px">
                     <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Color="Color.Secondary"/> <span>@address</span>
                     <br/>
                     <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" Color="Color.Secondary"/> <span>@Convert.ToDateTime(e.eventTimes[0].startDateAndTime).ToString("ddd, dd MMM, yyyy, hhtt")</span>
                     <br/>

                     <MudChip T="string" Size="Size.Small" Color="Color.Warning"><b>@e.eventOption</b></MudChip>
                     
                     @if (e.eventTimes.Count > 1)
                     {
                        <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTimes.Count+ Times</MudChip>
                     }
                     else
                     {
                        <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTimes.Count Time</MudChip>  
                     }

                     @if (e.eventTickets.Count > 1)
                     {
                        <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTickets.Count+ Tickets</MudChip>
                     }
                     else
                     {
                        <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTickets.Count Ticket</MudChip>
                     }
                     <br/>
                     <hr/>
                  </div>
               </MudCardContent>
               <MudCardActions>
                  <MudText Typo="Typo.body2" Color="Color.Primary"><b>@e.paymentOptions.FirstOrDefault()?.name</b></MudText>
                  <MudSpacer></MudSpacer>
                  <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Primary"><b>Get tickets</b></MudButton>
               </MudCardActions>
            </MudCard>
         </MudItem>
      }
   }
   </MudGrid>
</MudContainer>


@code {
   [Inject] IEventService _eventService { get; set; }
   [Inject] NavigationManager? _navigate { get; set; }
   [Inject] ISnackbar? _snackbar { get; set; }
   
    private Transition transition = Transition.Slide;
   private bool _processing { get; set; } = false;
   private IEnumerable<FetchEventDto> _event = new List<FetchEventDto>();

   protected async override void OnInitialized()
   {
      _processing = true;
      var res = await _eventService.FetchEvent();
      _event = res.result.data ?? new List<FetchEventDto>();
      _processing = false;
      StateHasChanged();
   }

}


