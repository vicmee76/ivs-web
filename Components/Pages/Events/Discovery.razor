@page "/events/discovery"

<PageTitle>Iv's - Discovery</PageTitle>

<MudContainer Fixed="true" MaxWidth="MaxWidth.Medium">

    <div id="discovery-title"> <span id="discovery-title-1">Discover</span> every <span id="discovery-title-2">moment</span></div>

    <MudGrid Spacing="6" Justify="Justify.Center">

        @if (_processing)
        {
            <MudItem xs="12" sm="12" md="12" lg="12">
                <MudSkeleton Height="42px;" />
                <MudSkeleton Height="42px;" />
                <MudSkeleton Height="42px;" />
            </MudItem>
        }
        else
        {
            foreach (var e in _event)
            {
                string eventName = e.eventName.Length > 19 ? e.eventName[..21] + " ..." : e.eventName;
                string address = e.eventAddress.Length > 25 ? e.eventAddress[..25] + " ..." : e.eventAddress;

                <MudItem xs="12" sm="12" md="6" lg="3" xl="3" xxl="2">
                    <MudCard>
                        <MudCardMedia Image="@e.eventImageData" Height="200" />
                        <MudCardContent>
                            <br />
                            <div style="font-size: medium"><b>@eventName</b></div>
                            <br />
                            <div style="line-height: 40px">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Color="Color.Secondary" /> <span>@address</span>
                                <br />
                                <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" Color="Color.Secondary" /> <span>
                                    @if (e.eventTimes.Any())
                                    {
                                        @Convert.ToDateTime(e.eventTimes[0].startDateAndTime).ToString("ddd, dd MMM, yyyy, hhtt")
                                    }
                                </span>
                                <br />

                                <MudChip T="string" Size="Size.Small" Color="Color.Warning"><b>@e.eventOption</b></MudChip>

                                @if (e.eventTimes.Any() && e.eventTimes.Count > 1)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTimes.Count Times</MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTimes.Count Time</MudChip>
                                }

                                @if (e.eventTickets.Any() && e.eventTickets.Count > 1)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTickets.Count Tickets</MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Default">@e.eventTickets.Count Ticket</MudChip>
                                }
                                <br />
                                <hr />
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudText Typo="Typo.body2" Color="Color.Primary"><b>@e.paymentOptions.FirstOrDefault()?.name</b></MudText>
                            <MudSpacer></MudSpacer>
                            <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Primary"><b>Get tickets</b></MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>

    <div>
        <br />
        <br />
        <br />
        <br />
    </div>

    <div style="text-align : center">
        <MudButton Variant="Variant.Filled" Disabled="@_getProcessing" OnClick="@((e) => LoadEventAction())" id="btnDarkColor" Size="Size.Large">
            @if (_getProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText><b>Load More</b></MudText>
            }
        </MudButton>
    </div>

</MudContainer>


@code {
    [Inject] IEventService _eventService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }
    [Inject] IConfiguration? _config { get; set; }

    private Transition transition = Transition.Slide;
    private bool _processing { get; set; } = false;
    private bool _getProcessing { get; set; } = false;
    private List<FetchEventDto> _event = new List<FetchEventDto>();
    Dictionary<string, int> queryParameter = new Dictionary<string, int> { { "page", 0 }, { "limit", 0 } };

    protected async override void OnInitialized()
    {
        queryParameter["limit"] = _config.GetValue<int>("Pagination:DiscoveryLoadMoreLimit");
        queryParameter["page"] = _config.GetValue<int>("Pagination:DiscoveryLoadMorePage");

        _processing = true;
        var res = await _eventService.FetchEvent(queryParameter);
        var data = res.result.data ?? new List<FetchEventDto>();
        _event.AddRange(data);
        _processing = false;
        StateHasChanged();
    }


    private async Task LoadEventAction()
    {
        _getProcessing = true;
        queryParameter["page"] = _event.Count;

        var res = await _eventService.FetchEvent(queryParameter);
        if (res.result.code == ResponseCodes.ResponseCodeOk)
        {
            var data = (List<FetchEventDto>)res.result.data;
            _event.AddRange(data);
        }
        else
        {
            _snackbar.Add(res.result.message, Severity.Error);
        }

        StateHasChanged();
        _getProcessing = false;
    }

}


