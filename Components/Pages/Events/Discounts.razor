@page "/events/create-event-discount/{id}"
@page "/events/update-event-discount/{id}"

@{
   CultureInfo nigeriaCulture = new CultureInfo("en-NG");
   nigeriaCulture.NumberFormat.CurrencySymbol = "â‚¦";
   Thread.CurrentThread.CurrentCulture = nigeriaCulture;
   Thread.CurrentThread.CurrentUICulture = nigeriaCulture;
}

<PageTitle>Iv's - Create Event Discount</PageTitle>

<br />

<AuthorizeView Roles="User,Admin">
   <NotAuthorized>
      No Access
   </NotAuthorized>

   <Authorized Context="cntx">

      <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

         <MudPaper Elevation="0">
            <MudToolBar>
               <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
               <MudSpacer />

               @if (!_getEventprocessing)
               {
                  <MudSkeleton Animation="Animation.Wave" Width="20%" />
               }
               else
               {
                  <MudText><b style="color:#56375C">Create Event Discount for -- <b>@eventName</b></b></MudText>
               }

            </MudToolBar>
         </MudPaper>

         <br />

         <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">
            <MudTimelineItem Color="Color.Success" Variant="Variant.Outlined">
               <ItemContent>
                  <MudAlert Severity="Severity.Success" Dense="true" ContentAlignment="HorizontalAlignment.Center" NoIcon="false" ><b>Event Details</b></MudAlert>
               </ItemContent>
            </MudTimelineItem>

            <MudTimelineItem Color="Color.Secondary" Variant="Variant.Outlined">
               <ItemContent>
                  <MudAlert Severity="Severity.Normal" Dense="true" ContentAlignment="HorizontalAlignment.Center" NoIcon="false"><b>Tickets & Discounts</b></MudAlert>
               </ItemContent>
            </MudTimelineItem>

            <MudTimelineItem Color="Color.Default" Variant="Variant.Outlined">
               <ItemContent>
                  <MudAlert Severity="Severity.Normal" Dense="true" ContentAlignment="HorizontalAlignment.Center" NoIcon="false"><b>Publish</b></MudAlert>
               </ItemContent>
            </MudTimelineItem>
         </MudTimeline>
         
         
         <br/>

         <MudContainer Fixed="false" MaxWidth="MaxWidth.Large">
            
            
            <MudGrid Spacing="10">
               
               <MudItem sm="12" xs="12" md="12" lg="6">
                  <div style="text-align:left">

                     <MudText Typo="Typo.body1"> <b>Create discounts for this event here</b></MudText>

                     <br/>
                     <br/>

                     <EditForm Model="@model" OnValidSubmit="@(async () => await ActionCreateDiscount(isUpdate))">
                        <DataAnnotationsValidator/>

                        <MudGrid Spacing="10">

                           <MudItem xs="12" sm="12" md="6" lg="6" xl="6" xxl="6">
                              <MudSelect T="string" Label="Discount Type" HelperText="Select your discount type" @bind-Value="model.discountType" For="@(() => model.discountType)" Margin="Margin.None" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true">
                                 @* <MudSelectItem Value="@(Helpers.FlatDiscount)"> @(Helpers.FlatDiscount)</MudSelectItem> *@
                                 <MudSelectItem Value="@(Helpers.PercentageDiscount)"> @(Helpers.PercentageDiscount)</MudSelectItem>
                              </MudSelect>
                           </MudItem>

                           <MudItem xs="12" sm="12" md="6" lg="6" xl="6" xxl="6">
                              <MudNumericField Label="Discount Value" Max="100" Step=".1M" HelperText="Enter your discount value" @bind-Value="model.discountValue" For="@(() => model.discountValue)" Margin="Margin.None" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                           </MudItem>
                        </MudGrid>
                        
                        <MudTextField InputType="InputType.Text" Label="Discount Code" Margin="Margin.None" HelperText="Enter your discount code" @bind-Value="model.discountCode" For="@(() => model.discountCode)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true"/>
                        
                        <MudButton ButtonType="ButtonType.Submit" FullWidth="false" Disabled="@_processing" Style="height:50px; background-color:#56375C; width:200px" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                           @if (_processing)
                           {
                              <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                              <MudText Class="ms-2">Processing</MudText>
                           }
                           else
                           {
                              if (isUpdate)
                              {
                                 <MudText><b>Update Discount</b></MudText>
                              }
                              else
                              {
                                 <MudText><b>Create Discount</b></MudText>
                              }
                           }
                        </MudButton>

                        &nbsp;&nbsp;

                        <MudButton ButtonType="ButtonType.Submit" Href="@activateUrl" FullWidth="false" Disabled="@isUpdate" Style="height:50px; background-color:transparent; width:100px" Variant="Variant.Outlined" Color="Color.Dark" Class="mt-5">
                           <MudText Class="ms-2">Skip</MudText>
                        </MudButton>
                        

                     </EditForm>

                  </div>
               </MudItem>
               
               
               <MudItem sm="12" xs="12" md="12" lg="6">

                  <MudText Typo="Typo.body1"> <b>See your discounts for this event here</b></MudText>

                  <br /><br />

                  @if (!_getEventprocessing)
                  {
                     <MudSkeleton Animation="Animation.Wave" Width="40%" />
                     <MudSkeleton Animation="Animation.Wave" Width="60%" />
                     <MudSkeleton Animation="Animation.Wave" Width="90%" />
                  }
                  else
                  {
                     @if (_discountDto.Any())
                     {
                        <MudTimeline TimelinePosition="TimelinePosition.Start" DisableModifiers="false">
                           @foreach (var item in _discountDto)
                           {
                              <MudTimelineItem Size="Size.Small" Color="Color.Secondary" Elevation="2">
                                 <MudCard Outlined="true" Elevation="25">
                                    <MudCardHeader>
                                       <CardHeaderContent>
                                          <MudText Typo="Typo.body1"><b>@item.discountCode</b></MudText>
                                          <br />
                                          <div>
                                             <div><b>Type : </b><span>@item.discountType</span></div>
                                             <div><b>Percent Value : </b><span>@item.discountValue</span></div>
                                          </div>
                                       </CardHeaderContent>
                                       <CardHeaderActions>
                                          <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Title="Edit ticket" OnClick="@( () =>  ActionEditDiscount(item))" Color="Color.Default" aria-label="edit"></MudIconButton>
                                          <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Title="Delete ticket" OnClick="@(async () => await ActionDeleteDiscount(item._id))" Color="Color.Error" aria-label="delete"></MudIconButton>
                                       </CardHeaderActions>
                                    </MudCardHeader>
                                 </MudCard>
                              </MudTimelineItem>
                           }
                        </MudTimeline>

                        <br />
                        if (_isActive)
                        {
                           <center>
                              <MudButton ButtonType="ButtonType.Button" Href="@dasboardUrl" FullWidth="false" Style="height:50px; background-color:#56375C; width:130px" Variant="Variant.Filled" Color="Color.Warning" Class="mt-5">
                                 <MudText><b>Done</b></MudText>
                              </MudButton>
                           </center>
                        }
                        else
                        {
                           <center>
                              <MudButton ButtonType="ButtonType.Button" Href="@activateUrl" FullWidth="false" Style="height:50px; background-color:#56375C; width:130px" Variant="Variant.Filled" Color="Color.Warning" Class="mt-5">
                                 <MudText><b>Continue</b></MudText>
                              </MudButton>
                           </center>
                        }
                     }
                     else
                     {
                        <MudTimeline TimelinePosition="TimelinePosition.Start" DisableModifiers="false">
                           <MudTimelineItem Size="Size.Small" Color="Color.Default" Elevation="2">
                              <MudCard Outlined="true" Elevation="25">
                                 <MudCardHeader>
                                    <CardHeaderContent>
                                       <MudText Typo="Typo.body1"><b>No discount yet</b></MudText>

                                    </CardHeaderContent>
                                 </MudCardHeader>
                              </MudCard>
                           </MudTimelineItem>
                        </MudTimeline>
                     }

                  }
                  
               </MudItem>
               
            </MudGrid>
            
            
         </MudContainer>

      </MudContainer>
      
      
   </Authorized>
   
</AuthorizeView>

@code {

   [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
   [Inject] IEventService _eventService { get; set; }
   [Inject] IDiscountService _discountService { get; set; }
   [Inject] NavigationManager? _navigate { get; set; }
   [Inject] ISnackbar? _snackbar { get; set; }
   
   [Parameter] public string? id { get; set; }
   [SupplyParameterFromForm] public CreateDiscountVM? model { get; set; }

   AuthUser authUser = new AuthUser();
   IEnumerable<DiscountResponseDto> _discountDto = new List<DiscountResponseDto>();
   
   private string discountId { get; set; }
   private string userId { get; set; }
   private string eventName { get; set; }
   private string activateUrl { get; set; }
   private string dasboardUrl { get; set; }

   private bool _getEventprocessing { get; set; } = false;
   private bool _processing { get; set; } = false;
   private bool _isActive { get; set; } = false;
   private bool isUpdate { get; set; } = false;

   
   private List<BreadcrumbItem> _items =
   [
      new("Events", href: "/events/my-events"),
      new("Create Discount", href: null, disabled: true)
   ];


   protected async override void OnInitialized()
   {
      _getEventprocessing = false;
      model = new CreateDiscountVM();
      var state = await _authStateProvider.GetAuthenticationStateAsync();

      if (!state.User.Identity.IsAuthenticated)
      {
         _navigate.NavigateTo("/accounts/login");
      }
      else
      {
         var auth = await authUser.GetAuthUserAsync(state);
         userId = auth.Id;
         await InitializeComponent();
      }

      _getEventprocessing = true;
      StateHasChanged();
   }



   private async Task InitializeComponent()
   {
      _getEventprocessing = false;
      var res = await _eventService.GetEventMetaData(id);
      if (res.result.code == ResponseCodes.ResponseCodeOk)
      {
         if (res?.result?.data.status == Helpers.Active)
         {
            _isActive = true;
            dasboardUrl = "/events/dashboard";
            _snackbar.Add("Event is already active", Severity.Info);
         }

         eventName = res.result.data.eventName;
         activateUrl = $"/events/activate-event/{id}";
      }
      else
      {
         _snackbar.Add(res.result.message, Severity.Error);
      }
      
      var res2 = await _discountService.GetDiscountByEventId(id);
      _discountDto = res2.result.data ?? new List<DiscountResponseDto>();
      _getEventprocessing = true;
   }

   private void RestDiscount()
   {
      model = new CreateDiscountVM();
      discountId = string.Empty;
      isUpdate = false;
   }
   

   private async Task ActionCreateDiscount(bool isUpdate)
   {
      _processing = true;
      model.eventId = id;
      var response = isUpdate ? await _discountService.UpdateDiscount(discountId, model) : await _discountService.CreateDiscount(model);
      HandleDiscountResponse(response, isUpdate);
      StateHasChanged();
      _processing = false;
   }

   private async void HandleDiscountResponse(ResponseObject response, bool isUpdate)
   {
      var successCode = isUpdate ? ResponseCodes.ResponseCodeOk : ResponseCodes.ResponseCodeCreated;

      if (response.result.code == successCode)
      {
         _snackbar.Add(response.result.message, Severity.Success);
         await InitializeComponent();
         RestDiscount();
         StateHasChanged();
      }
      else
      {
         _snackbar.Add(response.result.message, Severity.Error);
      }
   }


   private void ActionEditDiscount(DiscountResponseDto item)
   {
      isUpdate = true;
      discountId = item._id;
      model.discountType = item.discountType;
      model.discountValue = item.discountValue;
      model.discountCode = item.discountCode;
   }

   private async Task ActionDeleteDiscount(string itemId)
   {
      var res = await _discountService.DeleteDiscountById(itemId);
      _snackbar.Add(res.result.message, res.result.code == ResponseCodes.ResponseCodeOk ? Severity.Success : Severity.Error);
      await InitializeComponent();
      RestDiscount();
      StateHasChanged();
   }

}