@page "/events/dashboard"

<PageTitle>Iv's - Dashboard</PageTitle>


<AuthorizeView Roles="User,Admin">
    <NotAuthorized>
        No Access
    </NotAuthorized>
    <Authorized>

        <br /><br />
        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">
            <MudMessageBox @ref="deleteEventMessageBox" Title="Delete event" CancelText="Cancel" YesText="Delete" Style="padding:20px;">
                <MessageContent>
                    Are you sure you want to delete this event
                </MessageContent>
                <YesButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary">Delete</MudButton>
                </YesButton>
                <CancelButton>
                    <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default">Cancel</MudButton>
                </CancelButton>
            </MudMessageBox>

            <MudPaper Elevation="0">
                <MudToolBar>

                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
                      <MudSpacer />

                    @if (_processing)
                    {
                        <MudSkeleton Height="42px" Width="200px" />
                    }
                    else
                    {
                        @if (fullname != null)
                        {
                            <MudText><b style="color:#56375C">Hi, @fullname</b></MudText>
                        }
                    }
                  
                   
                </MudToolBar>
            </MudPaper>

            <MudCard Elevation="0" Style="padding:20px">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6"><b>Dashboard</b></MudText>
                    </CardHeaderContent>

                    <CardHeaderActions>
                        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.AddCircle" Size="Size.Medium" Href="/events/create-event" Color="Color.Secondary">Create Event</MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>

                    <div>

                        <MudGrid>
                            <MudItem xs="6" sm="6" md="3" lg="3" xl="3" xxl="3">
                                <MudPaper Class="pa-8" Outlined="true" Style="background-color:#ffedf7">
                                    <div style="line-height:35px">
                                        @if (_processing)
                                        {
                                            <MudSkeleton Height="42px;" />
                                        }
                                        else
                                        {
                                            <h1>@totalEvent</h1>
                                        }

                                        <div>Total Events</div>
                                    </div>
                                </MudPaper>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="3" lg="3" xl="3" xxl="3">
                                <MudPaper Class="pa-8" Outlined="true" Style="background-color:#ededff">
                                    <div style="line-height:35px">
                                        @if (_processing)
                                        {
                                            <MudSkeleton Height="42px;" />
                                        }
                                        else
                                        {
                                            <h1>@upcomingEvent</h1>
                                        }
                                        <div>Upcoming Schedules </div>
                                    </div>
                                </MudPaper>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="3" lg="3" xl="3" xxl="3">
                                <MudPaper Class="pa-8" Outlined="true" Style="background-color:#ffffed">
                                    <div style="line-height:35px">
                                        @if (_processing)
                                        {
                                            <MudSkeleton Height="42px;" />
                                        }
                                        else
                                        {
                                            <h1>@totalAmount</h1>
                                        }
                                        <div>Total Amount</div>
                                    </div>
                                </MudPaper>
                            </MudItem>

                            <MudItem xs="6" sm="6" md="3" lg="3" xl="3" xxl="3">
                                <MudPaper Class="pa-8" Outlined="true" Style="background-color:#ffeded">
                                    <div style="line-height:35px">
                                        <div style="line-height:35px">
                                            @if (_processing)
                                            {
                                                <MudSkeleton Height="42px;" />
                                            }
                                            else
                                            {
                                                <h1>@totalSettlements</h1>
                                            }
                                            <div>Total Settlements</div>
                                        </div>
                                    </div>
                                </MudPaper>
                            </MudItem>

                        </MudGrid>

                    </div>

                    <br /><br />

                    <br />

                    @if (_processing)
                    {
                        <MudSkeleton Height="42px;" />
                        <MudSkeleton Height="42px;" />
                        <MudSkeleton Height="42px;" />
                    }
                    else
                    {
                        @if (_eventsDto.Any())
                        {

                            <MudDataGrid T="UpcomingEventsDto" Elevation="1" Bordered="true" Striped="true" Hover="true" MultiSelection="false" Items="@_eventsDto" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                                         Hideable="false">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6" Color="Color.Secondary"><b>Upcoming Events (2 weeks)</b></MudText>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <Columns>
                                    <TemplateColumn Title="Actions" Sortable="false" Filterable="false">
                                        <CellTemplate Context="ctx">
                                            @{
                                                var eventPanelUrl = $"/events/event-panel/{ctx.Item.ivsEventId}";
                                                var updateUrl = $"/events/update-event/{ctx.Item.ivsEventId}";
                                            }
                                            <MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Color="Color.Default">
                                                <MudMenuItem Href="@eventPanelUrl">View event</MudMenuItem>
                                                <MudMenuItem Href="@updateUrl">Edit event</MudMenuItem>
                                            </MudMenu>
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <PropertyColumn Property="x => x.eventOption" Title="Privacy" Sortable="true" Filterable="true" />

                                    <PropertyColumn Property="x => x.eventName" Title="Event Name" Sortable="true" Filterable="true" />

                                    <PropertyColumn Property="x => x.eventAddress" Title="Event Address" Sortable="false" Filterable="true" />

                                    <TemplateColumn Title="Event Start Date" Sortable="true" Filterable="true">
                                        <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.startDateAndTime).ToString("F") </CellTemplate>
                                    </TemplateColumn>

                                    <TemplateColumn Title="Event End Date" Sortable="true" Filterable="true">
                                        <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.endDateAndTime).ToString("F") </CellTemplate>
                                    </TemplateColumn>

                                    <PropertyColumn Property="x => x.attendeesCount" Title="Attendance" Sortable="true" Filterable="false" />

                                    <TemplateColumn Title="View" Sortable="false" Filterable="false">
                                        <CellTemplate Context="ctx">
                                            @{
                                                var eventPanelUrl = $"/events/event-panel/{ctx.Item.ivsEventId}";
                                            }
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" Href="@eventPanelUrl" Title="View event" Size="Size.Medium" Color="Color.Secondary" />
                                        </CellTemplate>
                                    </TemplateColumn>

                                </Columns>
                                <PagerContent>
                                    <MudDataGridPager T="UpcomingEventsDto" />
                                </PagerContent>
                            </MudDataGrid>

                        }
                        else
                        {
                            <div style="text-align:center;">
                                <MudImage Src="images/backgrounds/no-data.png" Alt="No data image" Elevation="0" Height="130" Class="rounded-lg" />
                                <br />
                                <MudText Typo="Typo.h5"> <b>You don't have any upcoming event yet!</b></MudText>
                                <br>
                                <MudText> Your upcoming event(s) will show up here 2 weeks before they start.</MudText>
                            </div>
                        }
                    }

                </MudCardContent>
            </MudCard>

        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {

    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IEventService _eventService { get; set; }
    [Inject] IEventTimeService _eventTimeService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }

    private MudMessageBox deleteEventMessageBox { get; set; }

    IEnumerable<UpcomingEventsDto> _eventsDto = new List<UpcomingEventsDto>();
    AuthUser authUser = new AuthUser();

    private string fullname { get; set; }
    private string userId { get; set; }
    private bool _processing { get; set; } = false;
    private bool isGridView { get; set; } = true;


    private int totalEvent { get; set; }
    private int upcomingEvent { get; set; }
    private decimal totalAmount { get; set; }
    private decimal totalSettlements { get; set; }

    private string _searchString;
    private bool _sortNameByLength;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
    new BreadcrumbItem("Events", href: "#"),
    new BreadcrumbItem("Dashboard", href: null, disabled: true)
};


    protected async override void OnInitialized()
    {
        _processing = true;
        var state = await _authStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            userId = auth.Id;
            fullname = auth.SentenceCaseFullName;
            await GetEvents();
        }
        _processing = false;
        StateHasChanged();
    }



    private Func<UpcomingEventsDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.eventName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    private async Task GetEvents()
    {
        var res2 = await _eventService.GetEventByUser(userId);
        var events = res2.result.data ?? new List<GetEventByUserDto>();

        var res3 = await _eventTimeService.GetUpCommingEventsByUserId(userId);
        var upcoming = res3.result.data ?? new List<UpcomingEventsDto>();
        _eventsDto = upcoming;

        totalEvent = events.Count;
        upcomingEvent = upcoming.Count;


    }




}
