@page "/configuration/users"

<PageTitle>Iv's - Users</PageTitle>

<br />

<AuthorizeView Roles="Admin">

   <NotAuthorized>
      No Access
   </NotAuthorized>

   <Authorized Context="cntx">

      <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">
         <MudPaper Elevation="0">
            <MudToolBar>
               <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
            </MudToolBar>
         </MudPaper>

         <MudCard Elevation="0" Style="padding:5px">
            <MudCardHeader>
               <CardHeaderContent>
                  <MudText id="discovery-title-mid">Users</MudText>
               </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>

               @if (_processing)
               {
                  <MudSkeleton Height="42px;" />
                  <MudSkeleton Height="42px;" />
                  <MudSkeleton Height="42px;" />
               }
               else
               {
                  @if (_usersDto.Any())
                  {
                     <MudDataGrid T="GetAllUsersDto" Elevation="1" Bordered="true" Striped="true" Hover="true" MultiSelection="false" Items="@_usersDto" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                                  Hideable="false">
                        <ToolBarContent>
                           <MudText id="dasboard-count-title" Color="Color.Secondary"><b>@_usersDto.Count() User(s)</b></MudText>
                           <MudSpacer />
                           <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                         AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                           <PropertyColumn Property="x => x.fullname" Title="Fullname" Sortable="true" Filterable="true" />

                           <PropertyColumn Property="x => x.email" Title="Email" Sortable="true" Filterable="true" />

                           <PropertyColumn Property="x => x.role" Title="Role" Sortable="false" Filterable="false" />

                           <TemplateColumn Title="Verified" Sortable="false" Filterable="false">
                              <CellTemplate Context="ctx">
                                 @if (ctx.Item.isVerified)
                                 {
                                    <MudChip T="string" Variant="Variant.Text" Color="Color.Success"><b>Verified</b></MudChip>
                                 }
                                 else
                                 {
                                    <MudChip T="string" Variant="Variant.Text" Color="Color.Secondary"><b>Not Verified</b></MudChip>
                                 }
                              </CellTemplate>
                           </TemplateColumn>

                           <TemplateColumn Title="Active" Sortable="false" Filterable="false">
                              <CellTemplate Context="ctx">
                                 @if (ctx.Item.isActive)
                                 {
                                    <MudChip T="string" Variant="Variant.Text" Color="Color.Success"><b>Activated</b></MudChip>
                                 }
                                 else
                                 {
                                    <MudChip T="string" Variant="Variant.Text" Color="Color.Secondary"><b>Inactive</b></MudChip>
                                 }
                              </CellTemplate>
                           </TemplateColumn>

                           <TemplateColumn Title="Joined Date" Sortable="false" Filterable="false">
                              <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.createdAt).ToString("MMMM dd, yyyy") </CellTemplate>
                           </TemplateColumn>

                           <TemplateColumn Title="Activation Date" Sortable="false" Filterable="false">
                              <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.activatedOn).ToString("MMMM dd, yyyy") </CellTemplate>
                           </TemplateColumn>

                           <PropertyColumn Property="x => x.eventCount" Title="Events" Sortable="false" Filterable="false" />
                           
                           <TemplateColumn Title="View" Sortable="false" Filterable="false">
                              <CellTemplate Context="ctx">
                                 @{
                                    var eventPanelUrl = $"/configuration/user-details/{ctx.Item._id}";
                                 }
                                 <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" Href="@eventPanelUrl" Title="View event" Size="Size.Medium" Color="Color.Secondary" />
                              </CellTemplate>
                           </TemplateColumn>

                        </Columns>
                        <PagerContent>
                           <MudDataGridPager T="GetAllUsersDto" />
                        </PagerContent>
                     </MudDataGrid>
                  }
                  else
                  {
                     <div style="text-align:center;">

                        <br/><br/>
                        <br/><br/>

                        <MudImage Src="images/backgrounds/no-data.png" Alt="No data image" Elevation="0" Height="130" Class="rounded-lg"/>
                        <br/>
                        <MudText Typo="Typo.h5"> <b>No users yet!</b></MudText>
                        <br>
                        <MudText> When users sign up, you will see them here.</MudText>
                     </div>
                  }
               }

            </MudCardContent>
         </MudCard>

      </MudContainer>

   </Authorized>

</AuthorizeView>

@code {

   [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
   [Inject] NavigationManager? _navigate { get; set; }
   [Inject] ISnackbar? _snackbar { get; set; }
   [Inject] IAccountService? _accountService { get; set; }
   
   
   AuthUser authUser = new AuthUser();
   IEnumerable<GetAllUsersDto> _usersDto = new List<GetAllUsersDto>();
   
   private bool _processing { get; set; } = false;
   private string fullname { get; set; }
   private string userId { get; set; }
   private string _searchString;
   
   private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
   {
      new BreadcrumbItem("Configurations", href: "#"),
      new BreadcrumbItem("Users", href: null, disabled: true)
   };
   
   
   protected async override void OnInitialized()
   {
      _processing = true;
      var state = await _authStateProvider.GetAuthenticationStateAsync();

      if (!state.User.Identity.IsAuthenticated)
      {
         _navigate.NavigateTo("/accounts/login");
      }
      else
      {
         var auth = await authUser.GetAuthUserAsync(state);
         userId = auth.Id;
         fullname = auth.SentenceCaseFullName;
         await GetUsers();
      }
      _processing = false;
      StateHasChanged();
   }
   
   
   private Func<GetAllUsersDto, bool> _quickFilter => x =>
   {
      if (string.IsNullOrWhiteSpace(_searchString))
         return true;

      return x.fullname.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || x.email.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
   };
   
   
   private async Task GetUsers()
   {
      var res = await _accountService.GetUsers();
      var users = res.result.data ?? new List<GetAllUsersDto>();
      _usersDto = users;
   }

}