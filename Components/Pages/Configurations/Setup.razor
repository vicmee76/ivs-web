@page "/configuration/set-up"

<PageTitle>Iv's - Set up</PageTitle>

@{
    CultureInfo nigeriaCulture = new CultureInfo("en-NG");
    nigeriaCulture.NumberFormat.CurrencySymbol = "₦";
    Thread.CurrentThread.CurrentCulture = nigeriaCulture;
    Thread.CurrentThread.CurrentUICulture = nigeriaCulture;
}

<br />


<AuthorizeView Roles="Admin">

    <NotAuthorized>
        No Access
    </NotAuthorized>

    <Authorized Context="cntx">


        <MudMessageBox @ref="organisationActionMessageBox" Title="User Action" CancelText="Cancel" YesText="@userAction" Style="padding:20px;">
            <MessageContent>
                Are you sure you want to @userAction this organisation ?
            </MessageContent>
            <YesButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary">@userAction</MudButton>
            </YesButton>
            <CancelButton>
                <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default">Cancel</MudButton>
            </CancelButton>
        </MudMessageBox>


        <MudMessageBox @ref="eventTypeActionMessageBox" Title="User Action" CancelText="Cancel" YesText="@userAction" Style="padding:20px;">
            <MessageContent>
                Are you sure you want to @userAction this event type ?
            </MessageContent>
            <YesButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary">@userAction</MudButton>
            </YesButton>
            <CancelButton>
                <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default">Cancel</MudButton>
            </CancelButton>
        </MudMessageBox>



        <MudMessageBox @ref="paymentOptionActionMessageBox" Title="User Action" CancelText="Cancel" YesText="@userAction" Style="padding:20px;">
            <MessageContent>
                Are you sure you want to @userAction this payment option ?
            </MessageContent>
            <YesButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary">@userAction</MudButton>
            </YesButton>
            <CancelButton>
                <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Default">Cancel</MudButton>
            </CancelButton>
        </MudMessageBox>


        <MudContainer Fixed="true" MaxWidth="MaxWidth.Large">

            <MudPaper Elevation="0">
                <MudToolBar>
                    <MudBreadcrumbs Items="_items" Style="font-size:small; font-weight:bold;" Separator=">"></MudBreadcrumbs>
                </MudToolBar>
            </MudPaper>

            <MudCard Elevation="0" Style="padding:5px">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText id="discovery-title-mid">Set up</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>

                    <MudTabs Outlined="false" Position="Position.Top" Rounded="true" Border="true" ApplyEffectsToContainer="true" Class="" PanelClass="pa-10">

                        <MudTabPanel Text="Organisations">

                            <MudGrid Spacing="10">

                                <MudItem xs="12" sm="12" md="12" lg="3" xl="3" xxl="3">

                                    <MudPaper Class="pa-10">

                                        <MudText Typo="Typo.body1" Style="font-weight:bold">Create Organisation</MudText>
                                        <br />

                                        <EditForm Model="@organisationModel" OnValidSubmit="ActionOrganisation">
                                            <DataAnnotationsValidator />

                                            <MudTextField InputType="InputType.Text" Label="Name" Margin="Margin.Dense" HelperText="Enter Organisation name" @bind-Value="organisationModel.name" For="@(() => organisationModel.name)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                            <MudTextField InputType="InputType.Text" Label="Description" Margin="Margin.Dense" HelperText="Enter Description" @bind-Value="organisationModel.description" For="@(() => organisationModel.description)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                            <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Style="background:#56375C" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">
                                                @if (_processing)
                                                {
                                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                    <MudText Class="ms-2">Processing</MudText>
                                                }
                                                else
                                                {
                                                    if (isOrganisationUpdate)
                                                    {
                                                        <MudText>Update</MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudText>Create</MudText>
                                                    }
                                                }
                                            </MudButton>
                                        </EditForm>

                                    </MudPaper>


                                </MudItem>

                                <MudItem xs="12" sm="12" md="12" lg="9" xl="9" xxl="9">

                                    @if (_processing)
                                    {
                                        <MudSkeleton Height="42px;" />
                                        <MudSkeleton Height="42px;" />
                                        <MudSkeleton Height="42px;" />
                                    }
                                    else
                                    {
                                        @if (_orgsDto.Any())
                                        {
                                            <MudDataGrid T="GetOrganisationsDto" Elevation="1" Bordered="true" Striped="true" Hover="true" MultiSelection="false" Items="@_orgsDto" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_organisationQuickFilter"
                                            Hideable="false">
                                                <ToolBarContent>
                                                    <MudText id="dasboard-count-title" Color="Color.Secondary"><b>@_orgsDto.Count() Organisation(s)</b></MudText>
                                                    <MudSpacer />
                                                    <MudTextField @bind-Value="_organisationSearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                </ToolBarContent>
                                                <Columns>
                                                    <PropertyColumn Property="x => x.name" Title="Org. Name" Sortable="true" Filterable="true" />

                                                    <PropertyColumn Property="x => x.description" Title="Description" Sortable="false" Filterable="false" />


                                                    <TemplateColumn Title="CreatedAt" Sortable="false" Filterable="false">
                                                        <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.createdAt).ToString("MMMM dd, yyyy") </CellTemplate>
                                                    </TemplateColumn>

                                                    <TemplateColumn Title="Action" Sortable="false" Filterable="false">
                                                        <CellTemplate Context="ctx">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" OnClick="@(async () => await ActionUpdateOrganisation(ctx.Item))" Color="Color.Primary" Size="Size.Small" Ripple="true" />

                                                            <MudIconButton Icon="@Icons.Material.Filled.DeleteSweep" Variant="Variant.Filled" OnClick="@(async () => await ActionRemoveOrganisation(ctx.Item._id))" Color="Color.Error" Size="Size.Small" Ripple="true" />
                                                        </CellTemplate>
                                                    </TemplateColumn>

                                                </Columns>
                                                <PagerContent>
                                                    <MudDataGridPager T="GetOrganisationsDto" />
                                                </PagerContent>
                                            </MudDataGrid>
                                        }
                                        else
                                        {
                                            <div style="text-align:center;">

                                                <br /><br />
                                                <br /><br />

                                                <MudImage Src="images/backgrounds/no-data.png" Alt="No data image" Elevation="0" Height="70" Class="rounded-lg" />
                                                <br />
                                                <div>  <b>No event types yet!</b></div>
                                                <br>
                                                <MudText Typo="Typo.caption"> When event type(s) are created, you will see them here.</MudText>
                                            </div>
                                        }
                                    }




                                </MudItem>

                            </MudGrid>

                        </MudTabPanel>



                        <MudTabPanel Text="Event Types">

                            <MudGrid Spacing="10">

                                <MudItem xs="12" sm="12" md="12" lg="3" xl="3" xxl="3">

                                    <MudPaper Class="pa-10">

                                        <MudText Typo="Typo.body1" Style="font-weight:bold">Create Event Type</MudText>
                                        <br />

                                        <EditForm Model="@eventTypeModel" OnValidSubmit="ActionEventTypes">
                                            <DataAnnotationsValidator />

                                            <MudTextField InputType="InputType.Text" Label="Name" Margin="Margin.Dense" HelperText="Enter event type name" @bind-Value="eventTypeModel.name" For="@(() => eventTypeModel.name)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                            <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Style="background:#56375C" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">
                                                @if (_processing)
                                                {
                                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                    <MudText Class="ms-2">Processing</MudText>
                                                }
                                                else
                                                {
                                                    if (isEventTypeUpdate)
                                                    {
                                                        <MudText>Update</MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudText>Create</MudText>
                                                    }
                                                }
                                            </MudButton>
                                        </EditForm>

                                    </MudPaper>


                                </MudItem>

                                <MudItem xs="12" sm="12" md="12" lg="9" xl="9" xxl="9">

                                    @if (_processing)
                                    {
                                        <MudSkeleton Height="42px;" />
                                        <MudSkeleton Height="42px;" />
                                        <MudSkeleton Height="42px;" />
                                    }
                                    else
                                    {
                                        @if (_eventTypesDto.Any())
                                        {
                                            <MudDataGrid T="GetEventTypesDto" Elevation="1" Bordered="true" Striped="true" Hover="true" MultiSelection="false" Items="@_eventTypesDto" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_eventTypesQuickFilter"
                                            Hideable="false">
                                                <ToolBarContent>
                                                    <MudText id="dasboard-count-title" Color="Color.Secondary"><b>@_eventTypesDto.Count() Event type(s)</b></MudText>
                                                    <MudSpacer />
                                                    <MudTextField @bind-Value="_organisationSearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                </ToolBarContent>
                                                <Columns>
                                                    <PropertyColumn Property="x => x.name" Title="Event type name" Resizable="true" Sortable="true" Filterable="true" />

                                                    <TemplateColumn Title="Active" Sortable="false" Filterable="false">
                                                        <CellTemplate Context="ctx">
                                                            @if (ctx.Item.isActive.ToUpper() == "YES")
                                                            {
                                                                <MudChip T="string" Variant="Variant.Text" Color="Color.Success"><b>Yes</b></MudChip>
                                                                <MudIconButton Icon="@Icons.Material.Filled.ToggleOn" aria-label="Deactivate" Color="Color.Success" OnClick="@(async () => await SwitchEvent(ctx.Item._id, "No"))" />
                                                            }
                                                            else
                                                            {
                                                                <MudChip T="string" Variant="Variant.Text" Color="Color.Secondary"><b>No</b></MudChip>
                                                                <MudIconButton Icon="@Icons.Material.Filled.ToggleOff" aria-label="Activate" Color="Color.Secondary" OnClick="@(async () => await SwitchEvent(ctx.Item._id, "Yes"))" />
                                                            }
                                                        </CellTemplate>
                                                    </TemplateColumn>


                                                    <TemplateColumn Title="CreatedAt" Sortable="false" Filterable="false">
                                                        <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.createdAt).ToString("MMMM dd, yyyy") </CellTemplate>
                                                    </TemplateColumn>

                                                    <TemplateColumn Title="Action" Sortable="false" Filterable="false">
                                                        <CellTemplate Context="ctx">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" OnClick="@(async () => await ActionUpdateEvenTypes(ctx.Item))" Color="Color.Primary" Size="Size.Small" Ripple="true" />

                                                            <MudIconButton Icon="@Icons.Material.Filled.DeleteSweep" Variant="Variant.Filled" OnClick="@(async () => await ActionRemoveEventTypes(ctx.Item._id))" Color="Color.Error" Size="Size.Small" Ripple="true" />
                                                        </CellTemplate>
                                                    </TemplateColumn>

                                                </Columns>
                                                <PagerContent>
                                                    <MudDataGridPager T="GetEventTypesDto" />
                                                </PagerContent>
                                            </MudDataGrid>
                                        }
                                        else
                                        {
                                            <div style="text-align:center;">

                                                <br /><br />
                                                <br /><br />

                                                <MudImage Src="images/backgrounds/no-data.png" Alt="No data image" Elevation="0" Height="70" Class="rounded-lg" />
                                                <br />
                                                <div>  <b>No organisation yet!</b></div>
                                                <br>
                                                <MudText Typo="Typo.caption"> When organisation(s) are created, you will see them here.</MudText>
                                            </div>
                                        }
                                    }


                                </MudItem>

                            </MudGrid>

                        </MudTabPanel>


                        <MudTabPanel Text="Payment Options">

                            <MudGrid Spacing="10">

                                <MudItem xs="12" sm="12" md="12" lg="3" xl="3" xxl="3">

                                    <MudPaper Class="pa-10">

                                        <MudText Typo="Typo.body1" Style="font-weight:bold">Create payment options</MudText>
                                        <br />

                                        <EditForm Model="@paymentOptionModel" OnValidSubmit="ActionPaymentOptions">
                                            <DataAnnotationsValidator />

                                            <MudSwitch @bind-Value="paymentOptionModel.isSpecial" Label="Special Ticket" Margin="Margin.Dense" LabelPlacement="Placement.Right" Color="Color.Success" For="@(() => paymentOptionModel.isSpecial)"  />
                                    <br/>
                                            <MudTextField InputType="InputType.Text" Label="Name" Margin="Margin.Dense" HelperText="Enter payment option name" @bind-Value="paymentOptionModel.name" For="@(() => paymentOptionModel.name)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                            <MudTextField InputType="InputType.Text" Label="Description" Margin="Margin.Dense" HelperText="Enter description" @bind-Value="paymentOptionModel.description" For="@(() => paymentOptionModel.description)" Variant="Variant.Outlined" HelperTextOnFocus="true" Clearable="true" />

                                            <MudNumericField HideSpinButtons="true" HelperText="Enter amount" Margin="Margin.Dense" @bind-Value="paymentOptionModel.amount" For="@(() => paymentOptionModel.amount)" Required="true" ErrorText="Amount is required" Label="Amount" HelperTextOnFocus="true" Clearable="true" Variant="Variant.Outlined" Step=".2M" />

                                            <MudNumericField HelperText="Enter percentage" Margin="Margin.Dense" @bind-Value="paymentOptionModel.metaAmountPercentage" For="@(() => paymentOptionModel.metaAmountPercentage)" Label="Percentage" Variant="Variant.Outlined" Min="0" Max="10" HelperTextOnFocus="true" Clearable="true" Step=".1M" />

                                            <MudNumericField HelperText="Enter maximum users" Margin="Margin.Dense" @bind-Value="paymentOptionModel.maxUsers" For="@(() => paymentOptionModel.maxUsers)" Label="Max User" Variant="Variant.Outlined" Min="0" Max="@int.MaxValue" HelperTextOnFocus="true" Clearable="true" />
                                            
                                            <MudNumericField HelperText="Enter cap amount" Margin="Margin.Dense" @bind-Value="paymentOptionModel.capAmount" For="@(() => paymentOptionModel.capAmount)" Label="Cap. Amount" Variant="Variant.Outlined" Min="0" Max="2000" HelperTextOnFocus="true" Clearable="true" />
                                            
                                            <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Style="background:#56375C" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">
                                                @if (_processing)
                                                {
                                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                    <MudText Class="ms-2">Processing</MudText>
                                                }
                                                else
                                                {
                                                    if (isPaymentOptionUpdate)
                                                    {
                                                        <MudText>Update</MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudText>Create</MudText>
                                                    }
                                                }
                                            </MudButton>
                                        </EditForm>

                                    </MudPaper>


                                </MudItem>

                                <MudItem xs="12" sm="12" md="12" lg="9" xl="9" xxl="9">

                                    @if (_processing)
                                    {
                                        <MudSkeleton Height="42px;" />
                                        <MudSkeleton Height="42px;" />
                                        <MudSkeleton Height="42px;" />
                                    }
                                    else
                                    {
                                        @if (_paymentOptionDto.Any())
                                        {
                                            <MudDataGrid T="GetPaymentOptionsDto" Elevation="1" Bordered="true" Striped="true" Hover="true" MultiSelection="false" Items="@_paymentOptionDto" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_paymentOptionQuickFilter"
                                            Hideable="false">
                                                <ToolBarContent>
                                                    <MudText id="dasboard-count-title" Color="Color.Secondary"><b>@_paymentOptionDto.Count() Payment option(s)</b></MudText>
                                                    <MudSpacer />
                                                    <MudTextField @bind-Value="_paymentOptionSearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                </ToolBarContent>
                                                <Columns>
                                                    <PropertyColumn Property="x => x.name" Title="Payment Name" Resizable="true" Sortable="true" Filterable="true" />

                                                    <PropertyColumn Property="x => x.description" Title="Description" Resizable="true" Sortable="false" Filterable="false" />

                                                    <TemplateColumn Title="Amount" Sortable="true" Filterable="false">
                                                        <CellTemplate Context="ctx">

                                                            @{
                                                                var amt = Convert.ToDecimal(ctx.Item.amount.numberDecimal).ToString("C");
                                                            }
                                                            <MudText>@amt</MudText>
                                                        </CellTemplate>
                                                    </TemplateColumn>

                                                    <TemplateColumn Title="Percentage" Sortable="true" Filterable="false">
                                                        <CellTemplate Context="ctx">
                                                            <MudText>@ctx.Item.metaAmountPercentage.numberDecimal%</MudText>
                                                        </CellTemplate>
                                                    </TemplateColumn>
                                                    
                                                    <TemplateColumn Title="Max Users" Sortable="true" Filterable="false">
                                                        <CellTemplate Context="ctx">
                                                            <MudText>@ctx.Item.maxUsers?.ToString("N0")</MudText>
                                                        </CellTemplate>
                                                    </TemplateColumn>
                                                    
                                                    <TemplateColumn Title="Cap Amount" Sortable="true" Filterable="false">
                                                        <CellTemplate Context="ctx">
                                                            @{
                                                                var capAmt = Convert.ToDecimal(ctx.Item.capAmount).ToString("C");
                                                            }
                                                            <MudText>@capAmt</MudText>
                                                        </CellTemplate>
                                                    </TemplateColumn>

                                                    <TemplateColumn Title="CreatedAt" Sortable="false" Filterable="false">
                                                        <CellTemplate Context="ctx"> @Convert.ToDateTime(ctx.Item.createdAt).ToString("MMMM dd, yyyy") </CellTemplate>
                                                    </TemplateColumn>

                                                    <TemplateColumn Title="Action" Sortable="false" Filterable="false">
                                                        <CellTemplate Context="ctx">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" OnClick="@(async () => await ActionUpdatePaymentOption(ctx.Item))" Color="Color.Primary" Size="Size.Small" Ripple="true" />

                                                            <MudIconButton Icon="@Icons.Material.Filled.DeleteSweep" Variant="Variant.Filled" OnClick="@(async () => await ActionRemovePaymentOption(ctx.Item._id))" Color="Color.Error" Size="Size.Small" Ripple="true" />
                                                        </CellTemplate>
                                                    </TemplateColumn>

                                                </Columns>
                                                <PagerContent>
                                                    <MudDataGridPager T="GetPaymentOptionsDto" />
                                                </PagerContent>
                                            </MudDataGrid>
                                        }
                                        else
                                        {
                                            <div style="text-align:center;">

                                                <br /><br />
                                                <br /><br />

                                                <MudImage Src="images/backgrounds/no-data.png" Alt="No data image" Elevation="0" Height="70" Class="rounded-lg" />
                                                <br />
                                                <div>  <b>No ppayment option yet!</b></div>
                                                <br>
                                                <MudText Typo="Typo.caption"> When payment option(s) are created, you will see them here.</MudText>
                                            </div>
                                        }
                                    }


                                </MudItem>

                            </MudGrid>

                        </MudTabPanel>


                    </MudTabs>


                </MudCardContent>
            </MudCard>

        </MudContainer>

    </Authorized>

</AuthorizeView>

@code {


    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Configurations", href: "#", disabled: true),
        new BreadcrumbItem("Set up", href: "/configuration/set-up")
    };

    [Inject] AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject] IOrganizationService _organizationService { get; set; }
    [Inject] IEventTypeService _eventTypeService { get; set; }
    [Inject] IPaymentOptionService _paymentOptionService { get; set; }
    [Inject] NavigationManager? _navigate { get; set; }
    [Inject] ISnackbar? _snackbar { get; set; }

    [SupplyParameterFromForm] public CreateOrganizationDto? organisationModel { get; set; }
    [SupplyParameterFromForm] public CreateEentTypesDto? eventTypeModel { get; set; }
    [SupplyParameterFromForm] public CreatePaymentOptionDto? paymentOptionModel { get; set; }


    AuthUser authUser = new AuthUser();
    IEnumerable<GetOrganisationsDto> _orgsDto = new List<GetOrganisationsDto>();
    IEnumerable<GetEventTypesDto> _eventTypesDto = new List<GetEventTypesDto>();
    IEnumerable<GetPaymentOptionsDto> _paymentOptionDto = new List<GetPaymentOptionsDto>();


    private MudMessageBox organisationActionMessageBox { get; set; }
    private MudMessageBox eventTypeActionMessageBox { get; set; }
    private MudMessageBox paymentOptionActionMessageBox { get; set; }

    private string userAction { get; set; }

    private string fullname { get; set; }
    private string userId { get; set; }

    private bool _processing { get; set; }
    private bool isOrganisationUpdate { get; set; } = false;
    private bool isEventTypeUpdate { get; set; } = false;
    private bool isPaymentOptionUpdate { get; set; } = false;

    private string organisationId { get; set; } = string.Empty;
    private string eventTypeId { get; set; } = string.Empty;
    private string paymentOptionId { get; set; } = string.Empty;

    private string _organisationSearchString;
    private string _eventTypeSearchString;
    private string _paymentOptionSearchString;


    protected async override void OnInitialized()
    {
        organisationModel = new CreateOrganizationDto();
        eventTypeModel = new CreateEentTypesDto();
        paymentOptionModel = new CreatePaymentOptionDto();

        _processing = true;
        var state = await _authStateProvider.GetAuthenticationStateAsync();

        if (!state.User.Identity.IsAuthenticated)
        {
            _navigate.NavigateTo("/accounts/login");
        }
        else
        {
            var auth = await authUser.GetAuthUserAsync(state);
            userId = auth.Id;
            fullname = auth.SentenceCaseFullName;

            await GetOrganisation();
            await GetEventTypes();
            await GetPaymentOptions();
        }
        _processing = false;
        StateHasChanged();
    }




    #region Organisation Set up

    private Func<GetOrganisationsDto, bool> _organisationQuickFilter => x =>
    {
        return string.IsNullOrWhiteSpace(_organisationSearchString) || x.name.Contains(_organisationSearchString, StringComparison.OrdinalIgnoreCase);
    };


    private async Task GetOrganisation()
    {
        try
        {
            var res = await _organizationService.GetOrganizations();
            var data = res.result.data ?? new List<GetOrganisationsDto>();
            _orgsDto = data;
        }
        catch (Exception e)
        {
            _orgsDto = new List<GetOrganisationsDto>();
        }
    }


    private async Task ActionOrganisation()
    {

        if (!isOrganisationUpdate)
        {
            userAction = "Create";

            var result = await organisationActionMessageBox.ShowAsync();
            if (result == true)
            {
                var res = await _organizationService.CreateOrganizations(organisationModel);
                if (res.result != null && res.result.code == ResponseCodes.ResponseCodeCreated)
                {
                    await ResetOrganisation();
                    _snackbar.Add(res.result.message, Severity.Success);
                }
                else
                {
                    _snackbar.Add(res.result.message, Severity.Error);
                }
            }
        }
        else
        {
            userAction = "Update";
            var result = await organisationActionMessageBox.ShowAsync();
            if (result == true)
            {
                var res = await _organizationService.UpdateOrganizations(organisationId, organisationModel);
                if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk)
                {
                    await ResetOrganisation();
                    _snackbar.Add(res.result.message, Severity.Success);
                }
                else
                {
                    _snackbar.Add(res.result.message, Severity.Error);
                }
            }
        }
    }


    private async Task ActionUpdateOrganisation(GetOrganisationsDto model)
    {
        isOrganisationUpdate = true;
        organisationId = model._id;
        organisationModel = new CreateOrganizationDto()
        {
            description = model.description,
            name = model.name,
        };
        StateHasChanged();
    }


    private async Task ActionRemoveOrganisation(string id)
    {
        userAction = "Remove";

        var result = await organisationActionMessageBox.ShowAsync();
        if (result == true)
        {
            var res = await _organizationService.RemoveOrganizations(id);
            if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk)
            {
                await ResetOrganisation();
                _snackbar.Add(res.result.message, Severity.Success);
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
    }


    private async Task ResetOrganisation()
    {
        await GetOrganisation();
        organisationModel = new CreateOrganizationDto();
        userAction = string.Empty;
        organisationId = string.Empty;
        isOrganisationUpdate = false;
    }


    #endregion



    #region Event Types Set up


    private async Task ResetEventTypes()
    {
        await GetEventTypes();
        eventTypeModel = new  CreateEentTypesDto();
        userAction = string.Empty;
        eventTypeId = string.Empty;
        isEventTypeUpdate = false;
    }


    private async Task GetEventTypes()
    {
        try
        {
            var res = await _eventTypeService.GetEventTypes();
            var data = res.result.data ?? new List<GetEventTypesDto>();
            _eventTypesDto = data;
        }
        catch (Exception e)
        {
            _eventTypesDto = new List<GetEventTypesDto>();
        }
    }


    private Func<GetEventTypesDto, bool> _eventTypesQuickFilter => x =>
    {
        return string.IsNullOrWhiteSpace(_eventTypeSearchString) || x.name.Contains(_eventTypeSearchString, StringComparison.OrdinalIgnoreCase);
    };


    private async Task ActionUpdateEvenTypes(GetEventTypesDto model)
    {
        isEventTypeUpdate = true;
        eventTypeId = model._id;
        eventTypeModel = new CreateEentTypesDto()
        {
            name = model.name,
        };
        StateHasChanged();
    }



    private async Task ActionEventTypes()
    {
        if (!isEventTypeUpdate)
        {
            userAction = "Create";

            var result = await eventTypeActionMessageBox.ShowAsync();
            if (result == true)
            {
                var res = await _eventTypeService.CreateEventTypes(eventTypeModel);
                if (res.result != null && res.result.code == ResponseCodes.ResponseCodeCreated)
                {
                    await ResetEventTypes();
                    _snackbar.Add(res.result.message, Severity.Success);
                }
                else
                {
                    _snackbar.Add(res.result.message, Severity.Error);
                }
            }
        }
        else
        {
            userAction = "Update";
            var result = await eventTypeActionMessageBox.ShowAsync();
            if (result == true)
            {
                var res = await _eventTypeService.UpdateEventTypes(eventTypeId, eventTypeModel);
                if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk)
                {
                    await ResetEventTypes();
                    _snackbar.Add(res.result.message, Severity.Success);
                }
                else
                {
                    _snackbar.Add(res.result.message, Severity.Error);
                }
            }
        }
    }



    private async Task ActionRemoveEventTypes(string id)
    {
        userAction = "Remove";

        var result = await eventTypeActionMessageBox.ShowAsync();
        if (result == true)
        {
            var res = await _eventTypeService.RemoveEventTypes(id);
            if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk)
            {
                await ResetEventTypes();
                _snackbar.Add(res.result.message, Severity.Success);
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
    }


    private async Task SwitchEvent(string id, string switching)
    {
        userAction = "Switch";

        var result = await eventTypeActionMessageBox.ShowAsync();
        if (result == true)
        {
            var model = new SwitchEventTypeDto()
                {
                    isActive = switching
                };

            var res = await _eventTypeService.SwitchEventTypes(id, model);
            if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk)
            {
                await ResetEventTypes();
                _snackbar.Add(res.result.message, Severity.Success);
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
    }


    #endregion



    #region Payment option set up 

    private async Task ResetPaymentOption()
    {
        await GetPaymentOptions();
        paymentOptionModel = new CreatePaymentOptionDto();
        userAction = string.Empty;
        paymentOptionId = string.Empty;
        isPaymentOptionUpdate = false;
    }


    private async Task GetPaymentOptions()
    {
        try
        {
            var res = await _paymentOptionService.GetAllPaymentOptions();
            var data = res.result.data ?? new List<GetPaymentOptionsDto>();
            _paymentOptionDto = data;
        }
        catch (Exception e)
        {
            _paymentOptionDto = new List<GetPaymentOptionsDto>();;
        }
    }


    private Func<GetPaymentOptionsDto, bool> _paymentOptionQuickFilter => x =>
    {
        return string.IsNullOrWhiteSpace(_paymentOptionSearchString) || x.name.Contains(_paymentOptionSearchString, StringComparison.OrdinalIgnoreCase);
    };


    private async Task ActionUpdatePaymentOption(GetPaymentOptionsDto model)
    {
        isPaymentOptionUpdate = true;
        paymentOptionId = model._id;
        paymentOptionModel = new CreatePaymentOptionDto()
            {
                name = model.name,
                description = model.description,
                maxUsers = (int)model.maxUsers,
                metaAmountPercentage = Convert.ToDecimal(model.metaAmountPercentage.numberDecimal),
                capAmount = (int)model.capAmount,
                amount = Convert.ToDecimal(model.amount.numberDecimal),
                isSpecial = model.isSpecial
            };
        StateHasChanged();
    }



    private async Task ActionPaymentOptions()
    {
        if (!isPaymentOptionUpdate)
        {
            userAction = "Create";

            var result = await paymentOptionActionMessageBox.ShowAsync();
            if (result == true)
            {
                var res = await _paymentOptionService.CreatePaymentOptions(paymentOptionModel);
                if (res.result != null && res.result.code == ResponseCodes.ResponseCodeCreated)
                {
                    await ResetPaymentOption();
                    _snackbar.Add(res.result.message, Severity.Success);
                }
                else
                {
                    _snackbar.Add(res.result.message, Severity.Error);
                }
            }
        }
        else
        {
            userAction = "Update";
            var result = await paymentOptionActionMessageBox.ShowAsync();
            if (result == true)
            {
                var res = await _paymentOptionService.UpdatePaymentOptions(paymentOptionId, paymentOptionModel);
                if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk)
                {
                    await ResetPaymentOption();
                    _snackbar.Add(res.result.message, Severity.Success);
                }
                else
                {
                    _snackbar.Add(res.result.message, Severity.Error);
                }
            }
        }
    }



    private async Task ActionRemovePaymentOption(string id)
    {
        userAction = "Remove";

        var result = await paymentOptionActionMessageBox.ShowAsync();
        if (result == true)
        {
            var res = await _paymentOptionService.RemovePaymentOptions(id);
            if (res.result != null && res.result.code == ResponseCodes.ResponseCodeOk)
            {
                await ResetPaymentOption();
                _snackbar.Add(res.result.message, Severity.Success);
            }
            else
            {
                _snackbar.Add(res.result.message, Severity.Error);
            }
        }
    }

    #endregion



}
